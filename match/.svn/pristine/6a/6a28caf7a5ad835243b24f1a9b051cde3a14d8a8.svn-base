package com.dxtwangxiao.strongestsuperscholar.module.question.service.impl;

import com.dxtwangxiao.strongestsuperscholar.module.question.dao.ErrorQuestionRepository;
import com.dxtwangxiao.strongestsuperscholar.module.question.dao.MultipleQuestionCollectionRepository;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.ErrorQuestion;
import com.dxtwangxiao.strongestsuperscholar.module.question.service.ErrorQuestionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * 错题服务接口实现
 * Created by Xiaohe on 2018/9/9.
 */
@Service
@Transactional
public class ErrorQuestionServiceImpl implements ErrorQuestionService {

    @Autowired
    private ErrorQuestionRepository errorQuestionRepository;
    /**
     * 根据用户Id获取其错题列表
     *
     * @param userId 用户Id
     * @return 错题列表
     */
    public List<ErrorQuestion> getByUserId(String userId){
        List<ErrorQuestion> errorQuestionList=errorQuestionRepository.findByUserId(userId);
        //根据创建时间排序
        Collections.sort(errorQuestionList, new Comparator<ErrorQuestion>(){
            /*
             * int compare(Student o1, Student o2) 返回一个基本类型的整型，
             * 返回负数表示：o1 小于o2，
             * 返回0 表示：o1和o2相等，
             * 返回正数表示：o1大于o2。
             */
            public int compare(ErrorQuestion o1, ErrorQuestion o2) {
                //按照金额大小进行降序排列
                if(Double.parseDouble(o1.getCreateTime().replace("-","").replace(" ","").replace(":","").trim())
                        < Double.parseDouble(o2.getCreateTime().replace("-","").replace(" ","").replace(":","").trim())){
                    return 1;
                }
                if(Double.parseDouble(o1.getCreateTime().replace("-","").replace(" ","").replace(":","").trim())
                        == Double.parseDouble(o2.getCreateTime().replace("-","").replace(" ","").replace(":","").trim())){
                    return 0;
                }
                return -1;
            }
        });
        //去除重复值
        List<ErrorQuestion> newList = new ArrayList<ErrorQuestion>();
        for (ErrorQuestion eq:errorQuestionList) {
            boolean isadd=true;
            for (ErrorQuestion neq:newList) {
                if (neq.getQuestionId().equals(eq.getQuestionId())) {
                    isadd=false;
                }
            }
            if(isadd)
            newList.add(eq);
        }
        return newList;
    }
}
