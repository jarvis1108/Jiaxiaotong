package com.dxtwangxiao.strongestsuperscholar.module.question.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.dxtwangxiao.strongestsuperscholar.module.question.dao.*;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.Question;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.QuestionCollection;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.QuestionMultipleChoice;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.QuestionRecitation;
import com.dxtwangxiao.strongestsuperscholar.module.question.service.QuestionService;
import com.dxtwangxiao.strongestsuperscholar.module.question.vo.QuestionMultipleChoiceVO;
import com.dxtwangxiao.strongestsuperscholar.module.question.vo.MultipleQuestionCollection;
import com.dxtwangxiao.strongestsuperscholar.module.question.vo.QuestionRecitationVO;
import com.dxtwangxiao.strongestsuperscholar.web.util.MathUtil;
import com.dxtwangxiao.strongestsuperscholar.web.util.UUIDUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.function.Function;

/**
 * 试题服务实现
 * <p>
 * Created By Devin
 * 2018-09-04 上午 10:58
 */
@Service
public class QuestionServiceImpl implements QuestionService {

    @Autowired
    private MultipleQuestionCollectionRepository multipleQuestionCollectionRepository;

    @Autowired
    private QuestionCollectionRepository questionCollectionRepository;

    @Autowired
    private QuestionMultipleChoiceVORepository questionMultipleChoiceVORepository;

    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private QuestionMultipleChoiceRepository questionMultipleChoiceRepository;

    @Autowired
    private QuestionRecitationRepository questionRecitationRepository;

    @Autowired
    private QuestionRecitationVORepository questionRecitationVORepository;

    @Autowired
    private QuestionMultipleChoiceForLibVORepository questionMultipleChoiceForLibVORepository;

    /**
     * 根据用户Id获取其所收藏的选择题
     *
     * @param userId 用户Id
     * @return 题目列表
     */
    @Override
    public List<MultipleQuestionCollection> getCollectionsByUserId(String userId) {
        return multipleQuestionCollectionRepository.findByUserId(userId);
    }

    /**
     * 用户收藏题目
     *
     * @param userId     用户Id
     * @param questionId 试题Id
     * @return
     */
    @Override
    public MultipleQuestionCollection collectQuestion(String userId, String questionId) {
        MultipleQuestionCollection multipleQuestionCollection = multipleQuestionCollectionRepository.findByUserIdAndQuestionId(userId, questionId);
        if (multipleQuestionCollection == null) {
            QuestionCollection questionCollection = new QuestionCollection();
            questionCollection.setQuestionCollectionId(UUIDUtil.getUUID());
            questionCollection.setQuestionCollectionNo(questionCollection.getQuestionCollectionId());
            questionCollection.setUserId(userId);
            questionCollection.setQuestionId(questionId);
            questionCollection.setCreateTime(new Date());
            questionCollection.setIsValid(Byte.valueOf("1"));

            QuestionCollection result = questionCollectionRepository.save(questionCollection);
            if (result != null) {
                return multipleQuestionCollectionRepository.findByQuestionCollectionId(result.getQuestionCollectionId());
            } else {
                return null;
            }
        } else {
            return multipleQuestionCollection;
        }
    }

    /**
     * 用户取消收藏题目
     *
     * @param questionCollectionId 收藏题目Id
     * @return
     */
    @Override
    public Boolean cancelCollection(String questionCollectionId) {
        QuestionCollection questionCollection = questionCollectionRepository.findByQuestionCollectionId(questionCollectionId);
        questionCollection.setIsValid(Byte.valueOf("0"));
        QuestionCollection result = questionCollectionRepository.save(questionCollection);
        return result != null;
    }

    /**
     * 随机获取5道选择题，用户匹配对战等。
     *
     * @return 题目列表
     */
    @Override
    public List<QuestionMultipleChoiceVO> getRandomQuestions() {
        List<QuestionMultipleChoiceVO> result = new ArrayList<>();
        long rows = questionMultipleChoiceVORepository.count();
        List<Integer> randomNumbers = MathUtil.randomNumbers(rows, 5);
        for (Integer number : randomNumbers) {
            Pageable pageable = PageRequest.of(number, 1);
            Page<QuestionMultipleChoiceVO> multipleQuestionPage = questionMultipleChoiceVORepository.findAll(pageable);
            List<QuestionMultipleChoiceVO> pageContent = multipleQuestionPage.getContent();
            result.addAll(pageContent);
        }
        return result;
    }

    /**
     * 根据科目Id获取10道题目，用于知识练兵场
     *
     * @param subjectId 战局Id
     * @return
     */
    @Override
    public List<QuestionMultipleChoiceVO> getQuestionsBySubjectId(String subjectId) {
        List<QuestionMultipleChoiceVO> result = new ArrayList<>();
        long rows = questionMultipleChoiceVORepository.countAllBySubjectId(subjectId);
        List<Integer> randomNumbers = MathUtil.randomNumbers(rows, 10);
        for (Integer number : randomNumbers) {
            Pageable pageable = PageRequest.of(number, 1);
            Page<QuestionMultipleChoiceVO> multipleQuestionPage = questionMultipleChoiceVORepository.findBySubjectId(subjectId, pageable);
            List<QuestionMultipleChoiceVO> pageContent = multipleQuestionPage.getContent();
            result.addAll(pageContent);
        }
        return result;
    }

    /**
     * 存储试题
     *
     * @param question 试题
     * @return
     */
    @Override
    public void saveQuestion(Question question) {
        questionRepository.saveAndFlush(question);
    }

    /**
     * 删除试题
     *
     * @param questionId 题目Id
     * @return
     */
    @Override
    public void deleteQuestion(String questionId) {
        questionRepository.deleteById(questionId);
    }

    /**
     * 更新试题信息
     *
     * @param question 更新后的试题
     * @return
     */
    @Override
    public void updateQuestion(Question question) {
        questionRepository.saveAndFlush(question);
    }

    /**
     * 存储选择题
     *
     * @param questionMultipleChoice 选择题
     * @return
     */
    @Override
    public void saveQuestionMultipleChoice(QuestionMultipleChoice questionMultipleChoice) {
        questionMultipleChoiceRepository.saveAndFlush(questionMultipleChoice);
    }

    /**
     * 删除选择题
     *
     * @param questionMultipleChoiceId 选择题Id
     * @return
     */
    @Override
    public void deleteQuestionMultipleChoice(String questionMultipleChoiceId) {
        questionMultipleChoiceRepository.deleteById(questionMultipleChoiceId);
    }

    /**
     * 更新选择题
     *
     * @param questionMultipleChoice 更新后的选择题
     * @return
     */
    @Override
    public void updateQuestionMultipleChoice(QuestionMultipleChoice questionMultipleChoice) {
        questionMultipleChoiceRepository.saveAndFlush(questionMultipleChoice);
    }

    /**
     * 存储背诵题
     *
     * @param questionRecitation 背诵题
     * @return
     */
    @Override
    public void saveQuestionRecitation(QuestionRecitation questionRecitation) {
        questionRecitationRepository.saveAndFlush(questionRecitation);
    }

    /**
     * 删除背诵题
     *
     * @param questionRecitationId 背诵题Id
     * @return
     */
    @Override
    public void deleteQuestionRecitation(String questionRecitationId) {
        questionRecitationRepository.deleteById(questionRecitationId);
    }

    /**
     * 更新背诵题
     *
     * @param questionRecitation 更新后的背诵题
     * @return
     */
    @Override
    public void updateQuestionRecitation(QuestionRecitation questionRecitation) {
        questionRecitationRepository.saveAndFlush(questionRecitation);
    }


    /**
     * 使试题生效
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public void validateQuestion(String questionId) {
        Question question = questionRepository.findById(questionId).orElse(null);
        if (question == null) {
            return;
        }
        question.setIsValid(Byte.valueOf("1"));
    }

    /**
     * 使试题失效
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public void invalidateQuestion(String questionId) {
        Question question = questionRepository.findById(questionId).orElse(null);
        if (question == null) {
            return;
        }
        question.setIsValid(Byte.valueOf("0"));
    }

    /**
     * 根据Id寻找试题
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public Question findQuestionById(String questionId) {

        return questionRepository.findById(questionId).orElse(null);
    }

    /**
     * 根据Id寻找选择题
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public QuestionMultipleChoice findQuestionMultipleChoiceById(String questionId) {

        return questionMultipleChoiceRepository.findById(questionId).orElse(null);
    }

    /**
     * 根据Id寻找选择题表现层对象
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public QuestionMultipleChoiceVO findQuestionMultipleChoiceVOById(String questionId) {
        return questionMultipleChoiceVORepository.findById(questionId).orElse(null);
    }

    /**
     * 根据Id寻找背诵题表现层对象
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public QuestionRecitationVO findQuestionRecitationVOById(String questionId) {
        return questionRecitationVORepository.findById(questionId).orElse(null);
    }

    /**
     * 根据Id寻找背诵题
     *
     * @param questionId 试题Id
     * @return
     */
    @Override
    public QuestionRecitation findQuestionRecitationById(String questionId) {
        return questionRecitationRepository.findById(questionId).orElse(null);
    }

    /**
     * 获取条件过滤后的分页选择题列表
     *
     * @param pageable 分页信息
     * @param reqParam 过滤条件
     * @return 选择题列表
     */
    @Override
    public Page<QuestionMultipleChoiceVO> listQuestionMultipleChoice(Pageable pageable, JSONObject reqParam) {


        Specification<QuestionMultipleChoiceVO> specification = new Specification<QuestionMultipleChoiceVO>() {
            @Override
            public Predicate toPredicate(Root<QuestionMultipleChoiceVO> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<>();

                //知识点限定
                if (reqParam.get("knowledgeId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("knowledgeId").as(String.class), reqParam.getString("knowledgeId")));
                }

                //学科限定
                if (reqParam.get("subjectId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("subjectId").as(String.class), reqParam.getString("subjectId")));
                }

                //年级限定
                if (reqParam.get("gradeId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("gradeId").as(String.class), reqParam.getString("gradeId")));
                }

                //课程限定
                if (reqParam.get("courseId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("courseId").as(String.class), reqParam.getString("courseId")));
                }

                //问题级别限定
                if (reqParam.get("minQuestionLevel") != null && reqParam.get("maxQuestionLevel") == null) {
                    predicates.add(criteriaBuilder.greaterThan(root.get("questionLevel").as(Integer.class), reqParam.getInteger("minQuestionLevel")));
                }
                if (reqParam.get("minQuestionLevel") == null && reqParam.get("maxQuestionLevel") != null) {
                    predicates.add(criteriaBuilder.lessThan(root.get("questionLevel").as(Integer.class), reqParam.getInteger("maxQuestionLevel")));
                }
                if (reqParam.get("minQuestionLevel") != null && reqParam.get("maxQuestionLevel") != null) {
                    predicates.add(criteriaBuilder.between(root.get("questionLevel").as(Integer.class), reqParam.getInteger("minQuestionLevel"), reqParam.getInteger("maxQuestionLevel")));
                }

                //难度系数限定
                if (reqParam.get("minDifficulty") != null && reqParam.get("maxDifficulty") == null) {
                    predicates.add(criteriaBuilder.greaterThan(root.get("difficulty").as(Double.class), reqParam.getDouble("minDifficulty")));
                }
                if (reqParam.get("minDifficulty") == null && reqParam.get("maxDifficulty") != null) {
                    predicates.add(criteriaBuilder.lessThan(root.get("difficulty").as(Double.class), reqParam.getDouble("maxDifficulty")));
                }
                if (reqParam.get("minDifficulty") != null && reqParam.get("maxDifficulty") != null) {
                    predicates.add(criteriaBuilder.between(root.get("difficulty").as(Double.class), reqParam.getDouble("minDifficulty"), reqParam.getDouble("maxDifficulty")));
                }


                if (predicates.size() == 0) {
                    return null;
                }

                Predicate[] tP = new Predicate[predicates.size()];
                return criteriaBuilder.and(predicates.toArray(tP));
            }
        };
        // 分页, 排序
        return questionMultipleChoiceVORepository.findAll(specification, pageable);
    }

    /**
     * 获取条件过滤后的分页背诵题列表
     *
     * @param pageable 分页信息
     * @param reqParam 过滤条件
     * @return 背诵题列表
     */
    @Override
    public Page<QuestionRecitationVO> listQuestionRecitation(Pageable pageable, JSONObject reqParam) {
        Specification<QuestionRecitationVO> specification = new Specification<QuestionRecitationVO>() {
            @Override
            public Predicate toPredicate(Root<QuestionRecitationVO> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {
                List<Predicate> predicates = new ArrayList<>();

                //知识点限定
                if (reqParam.get("knowledgeId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("knowledgeId").as(String.class), reqParam.getString("knowledgeId")));
                }

                //学科限定
                if (reqParam.get("subjectId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("subjectId").as(String.class), reqParam.getString("subjectId")));
                }

                //年级限定
                if (reqParam.get("gradeId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("gradeId").as(String.class), reqParam.getString("gradeId")));
                }

                //课程限定
                if (reqParam.get("courseId") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("courseId").as(String.class), reqParam.getString("courseId")));
                }

                //问题级别限定
                if (reqParam.get("minQuestionLevel") != null && reqParam.get("maxQuestionLevel") == null) {
                    predicates.add(criteriaBuilder.greaterThan(root.get("questionLevel").as(Integer.class), reqParam.getInteger("minQuestionLevel")));
                }
                if (reqParam.get("minQuestionLevel") == null && reqParam.get("maxQuestionLevel") != null) {
                    predicates.add(criteriaBuilder.lessThan(root.get("questionLevel").as(Integer.class), reqParam.getInteger("maxQuestionLevel")));
                }
                if (reqParam.get("minQuestionLevel") != null && reqParam.get("maxQuestionLevel") != null) {
                    predicates.add(criteriaBuilder.between(root.get("questionLevel").as(Integer.class), reqParam.getInteger("minQuestionLevel"), reqParam.getInteger("maxQuestionLevel")));
                }

                //难度系数限定
                if (reqParam.get("minDifficulty") != null && reqParam.get("maxDifficulty") == null) {
                    predicates.add(criteriaBuilder.greaterThan(root.get("difficulty").as(Double.class), reqParam.getDouble("minDifficulty")));
                }
                if (reqParam.get("minDifficulty") == null && reqParam.get("maxDifficulty") != null) {
                    predicates.add(criteriaBuilder.lessThan(root.get("difficulty").as(Double.class), reqParam.getDouble("maxDifficulty")));
                }
                if (reqParam.get("minDifficulty") != null && reqParam.get("maxDifficulty") != null) {
                    predicates.add(criteriaBuilder.between(root.get("difficulty").as(Double.class), reqParam.getDouble("minDifficulty"), reqParam.getDouble("maxDifficulty")));
                }


                //是否节选
                if (reqParam.get("isPartial") != null) {
                    predicates.add(criteriaBuilder.equal(root.get("isPartial").as(Byte.class), reqParam.getByte("isPartial")));
                }


                if (predicates.size() == 0) {
                    return null;
                }

                Predicate[] tP = new Predicate[predicates.size()];
                return criteriaBuilder.and(predicates.toArray(tP));
            }
        };
        // 分页, 排序
        return questionRecitationVORepository.findAll(specification, pageable);
    }

}
