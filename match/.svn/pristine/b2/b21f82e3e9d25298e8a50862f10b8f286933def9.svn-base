package com.dxtwangxiao.strongestsuperscholar.module.system.service.impl;

import com.dxtwangxiao.strongestsuperscholar.module.match.entity.MatchRecord;
import com.dxtwangxiao.strongestsuperscholar.module.match.service.MatchRecordService;
import com.dxtwangxiao.strongestsuperscholar.module.system.dao.UserCoinDetailRepository;
import com.dxtwangxiao.strongestsuperscholar.module.system.dao.UserRelInfoRepository;
import com.dxtwangxiao.strongestsuperscholar.module.system.entity.UserCoinDetail;
import com.dxtwangxiao.strongestsuperscholar.module.system.entity.UserRelInfo;
import com.dxtwangxiao.strongestsuperscholar.module.system.service.UserCoinDetailService;
import com.dxtwangxiao.strongestsuperscholar.module.system.service.UserRelInfoService;
import com.dxtwangxiao.strongestsuperscholar.web.util.DateUtil;
import com.dxtwangxiao.strongestsuperscholar.web.util.UUIDUtil;
import com.dxtwangxiao.strongestsuperscholar.web.util.UpdateUtil;
import com.dxtwangxiao.strongestsuperscholar.web.vo.ErrorInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

/**
 * 用户金币明细服务实现类
 * <p>
 * Created by Devin
 * 2018-07-03 上午 10:00
 */
@Service
public class UserCoinDetailServiceImpl implements UserCoinDetailService {

    @Autowired
    private UserCoinDetailRepository userCoinDetailRepository;

    @Autowired
    private UserRelInfoRepository userRelInfoRepository;

    @Autowired
    private MatchRecordService matchRecordService;

    /**
     * 分页获取某一用户金币流水明细
     *
     * @param userId      用户id，必填
     * @param pageSize    页大小
     * @param currentPage 当前页
     * @return
     * @throws ErrorInfo
     */
    @Override
    public List<UserCoinDetail> getUserCoinDetailList(String userId, Integer pageSize, Integer currentPage) throws ErrorInfo {
        if (userId == null || userId.equals("")) {
            throw new ErrorInfo("E_" + "2018-07-30 09:00:00" + "_13_015", "用户ID不能为空", null);
        }

        if (pageSize == null || currentPage == null) {
            return userCoinDetailRepository.findAllByUserId(userId);
        } else {
            Pageable pageable = PageRequest.of(currentPage - 1, pageSize);
            Page<UserCoinDetail> userCoinDetailPage = userCoinDetailRepository.findByUserId(userId, pageable);
            return userCoinDetailPage.getContent();
        }
    }

    /**
     * 获取某一用户所有金币流水明细
     *
     * @param userId
     * @return
     * @throws ErrorInfo
     */
    @Override
    public List<UserCoinDetail> getAllUserCoinDetails(String userId) throws ErrorInfo {
        if (userId == null || userId.equals("")) {
            throw new ErrorInfo("E_" + "2018-07-30 09:00:00" + "_13_015", "用户ID不能为空", null);
        }
        return userCoinDetailRepository.findAllByUserId(userId);
    }

    /**
     * 创建一条金币流水明细
     *
     * @param newUserCoinDetail
     * @return
     * @throws ErrorInfo
     */
    @Override
    @Transactional
    public UserCoinDetail create(UserCoinDetail newUserCoinDetail) throws ErrorInfo {
        if (newUserCoinDetail == null)
            throw new ErrorInfo("E_" + "2018-07-30 09:00:00" + "_13_016", "用户流水明细信息为空", null);
        return userCoinDetailRepository.save(newUserCoinDetail);
    }

    /**
     * 更新用户金币数
     * @param matchId
     * @param userId
     * @param coin
     * @return
     */
    @Override
    @Transactional
    public UserCoinDetail save(String matchId, String userId, Integer coin) {
        MatchRecord matchRecord = matchRecordService.getById(matchId);
        UserRelInfo userRelInfo = userRelInfoRepository.findByUserId(userId);

        UserCoinDetail userCoinDetail = new UserCoinDetail();
        userCoinDetail.setUserCoinDetailId(UUIDUtil.getUUID());
        userCoinDetail.setUserCoinDetailNo(userCoinDetail.getUserCoinDetailId());
        userCoinDetail.setUserId(userId);
        userCoinDetail.setUserNo(userRelInfo.getUserNo());
        userCoinDetail.setOccurTime(new Timestamp(new Date().getTime()));
        userCoinDetail.setOriginalAmount(userRelInfo.getCoin());
        if (coin >= 0) {
            userCoinDetail.setAcquiredAmount(coin);
            userCoinDetail.setLossAmount(0);
        } else {
            userCoinDetail.setAcquiredAmount(0);
            userCoinDetail.setLossAmount(Math.abs(coin));
        }
        Integer currentAmount = userRelInfo.getCoin() + coin;
        userCoinDetail.setCurrentAmount(currentAmount);
        userCoinDetail.setReasonType("匹配对战");
        userCoinDetail.setMatchRecordId(matchId);
        userCoinDetail.setMatchRecordNo(matchRecord.getMatchRecordNo());
        userCoinDetail.setCreateTime(new Timestamp(new Date().getTime()));
        userCoinDetail.setCreateUser(userId);
        userCoinDetail.setLastUpdUser(userId);
        userCoinDetail.setIsValid(Byte.valueOf("1"));

        return userCoinDetailRepository.save(userCoinDetail);
    }
}
