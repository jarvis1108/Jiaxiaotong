package com.dxtwangxiao.strongestsuperscholar.module.mall.dao;

import com.dxtwangxiao.strongestsuperscholar.module.mall.entity.Coupon;
import com.dxtwangxiao.strongestsuperscholar.module.mall.entity.CouponDetail;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.junit4.SpringRunner;

import java.sql.Timestamp;
import java.util.List;

import static org.junit.Assert.*;

@SpringBootTest
@RunWith(SpringRunner.class)

/**
*@author: meiyu
*@Date: 2018/7/5 11:59
*@description 优惠券单元测试
*/
public class CouponRepositoryTest {
    @Autowired
    private CouponRepository couponRepository;

    @Test
    public void findAll() {
        PageRequest pageable = PageRequest.of(1,1);
        Page<Coupon> couponPage = couponRepository.findAll(pageable);

        List<Coupon> couponList = couponPage.getContent();
        assertEquals(0,couponList.size());
        couponList.forEach(System.out::println);
    }

    @Test
    public void save() {
        Coupon coupon = new Coupon();
        coupon.setAmount(1);
        coupon.setBeginTime(Timestamp.valueOf("2018-07-07 12:12:12"));
        coupon.setCouponId("1");
        coupon.setCouponNo("1");
        coupon.setCouponType(Byte.valueOf("1"));
        coupon.setCreateTime(Timestamp.valueOf("2018-07-07 12:12:12"));
        coupon.setCreateUser("1");
        coupon.setEndTime(Timestamp.valueOf("2018-07-07 12:12:12"));
        coupon.setIsValid(Byte.valueOf("1"));
        coupon.setLastUpdTime(Timestamp.valueOf("2018-07-07 12:12:12"));
        coupon.setLastUpdUser("11");
        coupon.setPeriodAmount(1);
        coupon.setRemark("this is test");

        Coupon result = couponRepository.save(coupon);
        assertNotNull(result);
        System.out.println(result);
    }

    @Test
    public void findAll1() {
        List<Coupon> couponList = couponRepository.findAll();
        assertNotEquals(1, couponList.size());

        couponList.forEach(System.out::println);
    }
}