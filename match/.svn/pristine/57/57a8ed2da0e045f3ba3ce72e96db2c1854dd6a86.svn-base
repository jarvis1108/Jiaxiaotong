<template>
	<div class="battle">
		<img class="bs-bg-img" src="/static/images/bg.png">
		<img class="bs-e_score_photo" src="/static/images/battle/Scorethelabel2.png">
		<img class="bs-p_score_photo" src="/static/images/battle/Scorethelabel1.png">

		<!--
        	时间：2018-07-18
        	描述：环形动画
       -->		
		<div class="bs-user-div">
			<img class="bs-score_hoop-img" src="/static/images/battle/Scorecircle.png">
			<div class="topBox">
				<div class="topCircle"  :style="{transform: 'rotate('+eTopRotation+'deg);'}">
					<img class="c1" src="/static/images/battle/Answerprogresstopcircle-bg.png">
				</div>
			</div>
			<div class="bottomBox">
				<div class="bottomCircle" :style="{transform: 'rotate('+eBottomRotation+'deg);'}">
					<img class="c2" src="/static/images/battle/Answerprogressbottomcircle-bg.png">
				</div>
			</div>
			<div class="bs-photo-div">
				<img class="photo_hoop" src="/static/images/battle/Pictureframe.png">
				<img class="user_photo" :src="userInfo.headImage">
			</div>
		</div>
		<div class="bs-pName-div bs-text1">{{ userInfo.wechatName }}</div>
		<div class="bs-pScore-div bs-text2">{{ animatedUserScore }}</div>								
		
		<div class="bs-opponent-div">
			<img class="bs-score_hoop-img" src="/static/images/battle/Scorecircle.png">
			<div class="topBox">
				<div class="topCircle"  :style="{transform: 'rotate('+eTopRotation+'deg);'}">
					<img class="c1" src="/static/images/battle/Answerprogresstopcircle-bg.png">
				</div>
			</div>
			<div class="bottomBox">
				<div class="bottomCircle" :style="{transform: 'rotate('+eBottomRotation+'deg);'}">
					<img class="c2" src="/static/images/battle/Answerprogressbottomcircle-bg.png">
				</div>
			</div>
			<div class="bs-photo-div">
				<img class="photo_hoop" src="/static/images/battle/Pictureframe.png">
				<img class="user_photo" :src="opponentInfo.headImage">
			</div>
		</div>
		<div class="bs-eName-div bs-text1">{{ opponentInfo.wechatName }}</div>		
		<span class="bs-eScore-div bs-text2">{{ animatedOpponentScore }}</span>	
		
		<!--
        	时间：2018-07-20
        	描述：题目的卡片
        -->
    <div class="st-questionCard-div">
            <img class="st-bg" src="/static/images/battle/subject-bg.png" alt="">
            <div class="st-questionTitle-div">
                <span>
                    {{question.question}}
                </span>
            </div>
            <div class="st-questionOption-div" id="choiceList">
              <div class="choice" v-for="label in choiceLabelList" @click="optionClick(label)" :key="label">
                  <img v-if="userWrong === label || (opponentWrong === label && !waitUser)" class="choice_img" src="/static/images/battle/Erroroption-bg.png"/>
                  <img v-else-if="question.answer === label && !waitUser" class="choice_img" src="/static/images/battle/Checktheoptionbox.png"/>
                  <img v-else class="choice_img" src="/static/images/battle/Optionbox.png"/>                 
                  <span v-if="label === 'A'" class="choice_content">{{question.choiceA}}</span>
                  <span v-if="label === 'B'" class="choice_content">{{question.choiceB}}</span>
                  <span v-if="label === 'C'" class="choice_content">{{question.choiceC}}</span>
                  <span v-if="label === 'D'" class="choice_content">{{question.choiceD}}</span>
                  <img class="errorIcon" v-if="userWrong === label" src="/static/images/battle/Errorlabel.png"/>
                  <img class="correctIcon" v-if="(cd === 0) ||question.answer === label && !waitUser" src="/static/images/battle/Correctlabel.png"/>
                  <img class="opponent-errorIcon" v-if="opponentWrong === label && !waitUser" src="/static/images/battle/Errorlabel.png"/>
                  <img class="opponent-correctIcon" v-if="(cd === 0) ||question.answer === label && !waitUser && !waitOpponent" src="/static/images/battle/Correctlabel.png"/>
              </div>
            </div>
    </div>
		
		<!--
        	时间：2018-07-18
        	描述：六角形的变大动画和倒计时动画
       -->
    <div class="bs-cut-down-div">
			<cutdown :order="questionIndex" showOrder="true" @cutdownd="cutdownd" @cutdownout="cutDownOut"></cutdown>
		</div>
        
	</div>
</template>

<script>
import cutdown from "@/components/cut_down";
import questioncard from "@/components/questioncard";
import { TweenLite } from "../assests/js/TweenMax.min";
import Global from "@/App";
import wxs from "../utils/wx";
export default {
  props: {
    userInfo: {
      type: Object,
      required: true
    },
    opponentInfo: {
      type: Object,
      required: true
    },
    question: {
      type: Object,
      required: true
    },
    userScore: {
      required: true
    },
    opponentAnswer: {
      type: Object,
      required: true
    },
    questionIndex: {
      required: true
    },
    nextQuestion: {
      type: Function,
      required: true
    },
    waitUser: {
      type: Boolean,
      required: true
    },
    waitOpponent: {
      type: Boolean,
      required: true
    }
  },
  components: {
    cutdown,
    questioncard
  },
  data() {
    return {
      choiceLabelList: ["A", "B", "C", "D"], //选项标签列表
      type: 0, //进入类型，0-常规对抗赛，1-好友对抗赛
      userDisplayScore: 0, //用于显示的分数
      aUserDisplayScore: 0, //用于显示的分数的动画
      opponentDisplayScore: 0, //用于显示的分数
      aOpponentDisplayScore: 0, //用于显示的分数的动画
      isClickable: true, //是否可以点击
      interval: null, //定时器
      cd: 10, //倒计时
      userWrong: "", //用户答错的选项
      opponentWrong: "", //对手答错的选项
      showQuestion: false //是否显示题目【适应动画时间、保证倒计时开始的那一刻才显示题目】
    };
  },
  watch: {
    //当前进入下一题，重置数据
    questionIndex() {
      this.isClickable = true;
      this.interval = null;
      this.cd = 10;
      this.userWrong = "";
      this.setInterval();
    },
    opponentAnswer() {
      if (this.opponentAnswer.answer != this.question.answer) {
        this.opponentWrong = this.opponentAnswer.answer;
      }
      this.opponentDisplayScore += this.opponentAnswer.score;
    },
    userScore() {
      this.userDisplayScore = this.userScore;
    },
    userDisplayScore(newVal) {
      TweenLite.to(this.$data, 0.5, { aUserDisplayScore: newVal });
    },
    opponentDisplayScore(newVal) {
      TweenLite.to(this.$data, 0.5, { aOpponentDisplayScore: newVal });
    }
  },
  computed: {
    animatedUserScore() {
      return this.aUserDisplayScore.toFixed(0);
    },
    animatedOpponentScore() {
      return this.aOpponentDisplayScore.toFixed(0);
    },
    pBottomRotation: function() {
      if (this.userDisplayScore < 250) {
        return this.userDisplayScore * 360 / 500;
      } else {
        return 180;
      }
    },
    pTopRotation: function() {
      if (this.userDisplayScore < 250) {
        return;
      } else {
        return this.userDisplayScore * 360 / 500 - 180;
      }
    },
    eBottomRotation: function() {
      if (this.opponentDisplayScore < 250) {
        return this.opponentDisplayScore * 360 / 500;
      } else {
        return 180;
      }
    },
    eTopRotation: function() {
      if (this.opponentDisplayScore < 250) {
        return;
      } else {
        return this.opponentDisplayScore * 360 / 500 - 180;
      }
    }
  },
  methods: {
    cutdownd(data){
      this.cd = data;
    },
    optionClick(label) {
      if (this.isClickable) {
        this.isClickable = false;
        //若用户答错，修改userWrong值
        if (label != this.question.answer) {
          this.userWrong = label;
        }
        //将用户输入返回
        this.$emit("userAnswered", {
          answer: label,
          timeLeft: this.cd
        });
      }
    },
    //时间到
    cutDownOut() {
      this.$emit("userAnswered", {
        answer: "",
        timeLeft: this.cd
      });
    },
    change(flag) {
      if (flag) {
        this.nextQuestion();
        clearInterval(this.interval);
        this.setInterval();
        //修改题目显示状态
        this.showQuestion = false;
        setTimeout(() => {
          this.showQuestion = true;
          console.log("显示题目");
        }, 2000);
      }
    },
    //创造分数圆环和显示分数增长的动画
    userScoreIncrease(value) {
      this.userDisplayScore += value;
      var _this = this;
      setTimeout(() => {
        if (this.userScore > this.userDisplayScore) {
          _this.userScoreIncrease(value);
        }
      }, 50);
    },

    getuserScore() {
      if (this.userScore > this.userDisplayScore) {
        var value = (this.userScore - this.userDisplayScore) / 10;
        this.userScoreIncrease(value);
      }
    },

    opponentScoreIncrease(value) {
      this.opponentDisplayScore += value;
      var _this = this;
      setTimeout(() => {
        if (this.opponentAnswer.score > this.opponentDisplayScore) {
          _this.opponentScoreIncrease(value);
        }
      }, 50);
    },
    getopponentScore() {
      if (this.opponentAnswer.score > this.opponentDisplayScore) {
        var value =
          (this.opponentAnswer.score - this.opponentDisplayScore) / 10;
        this.opponentScoreIncrease(value);
      }
    },
    setInterval() {
      // 设置定时：2500ms-倒计时前动画时间，10000ms=10s-倒计时时间
      this.interval = setInterval(() => {
        this.change(this.showQuestion);
      }, 12500);
    }
  },
  onLoad() {
    this.userDisplayScore = 0;
    this.opponentDisplayScore = 0;
    this.interval = null;
    this.showQuestion = false;
  }
};
</script>

<style scoped>
.st-questionCard-div {
  position: absolute;
  top: 23%;
  left: 5%;
  height: 70%;
  width: 90%;
}
.st-bg {
  height: 100%;
  width: 100%;
  z-index: 100;
}
.st-time-div {
  height: 45px;
  width: 40px;
  position: absolute;
  top: -4%;
  left: 46%;
}

.st-questionTitle-div {
  position: absolute;
  top: 8%;
  width: 80%;
  height: 20%;
  left: 11%;
  font-size: 12px;
}
#errorChoice,
#correctChoice {
  color: white;
}
.st-questionOption-div {
  position: absolute;
  top: 28%;
  left: 7%;
  width: 85%;
}
.choice {
  position: relative;
  width: 100%;
  height: 45px;
  margin-top: 8%;
  font-size: 18px;
  animation: choiceZoomOut 0.5s;
}
.choice_img {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 0;
}
.choice_content {
  position: absolute;
  width: 90%;
  height: 100%;
  left: 5%;
  top: 20%;
  text-align: center;
  z-index: 1;
}
.opponent-correctIcon {
  width: 19px;
  height: 19px;
  position: absolute;
  right: 10%;
  top: 25%;
  animation: zoomOut 0.5s;
}
.correctIcon {
  width: 19px;
  height: 19px;
  position: absolute;
  left: 10%;
  top: 25%;
  animation: zoomOut 0.5s;
}

.opponent-errorIcon {
  width: 15px;
  height: 15px;
  position: absolute;
  right: 10%;
  top: 30%;
  animation: zoomOut 0.5s;
}
.errorIcon {
  width: 15px;
  height: 15px;
  position: absolute;
  left: 10%;
  top: 30%;
  animation: zoomOut 0.5s;
}
.battle {
  width: 100%;
  height: 100%;
  position: fixed;
}
.bs-bg-img {
  width: 100%;
  height: 100%;
  position: absolute;
}

.bs-text1 {
  text-align: center;
  font-family: "PingFang-SC-Medium";
  color: #ffffff;
}

.bs-text2 {
  text-align: center;
  font-family: "PingFang-SC-Bold";
}
.bs-user-div {
  height: 13.01%;
  width: 21.86%;
  left: 5.33%;
  top: 2.85%;
  position: absolute;
  border-radius: 50%;
}

.bs-opponent-div {
  height: 13.01%;
  width: 21.86%;
  right: 5.33%;
  top: 2.85%;
  position: absolute;
  border-radius: 50%;
}

.bs-score_hoop-img {
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  position: absolute;
}

.bs-photo-div {
  width: 79.26%;
  height: 79.26%;
  border-radius: 50%;
  left: 10.36%;
  top: 10.36%;
  position: absolute;
}

.user_photo {
  height: 92.31%;
  width: 92.31%;
  top: 3.85%;
  left: 3.85%;
  position: absolute;
  border-radius: 50%;
}

.photo_hoop {
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  position: absolute;
}

.bs-pName-div {
  top: 16.98%;
  left: 5.33%;
  width: 21.87%;
  height: 2.86%;
  font-size: 36rpx;
  position: absolute;
}

.bs-eName-div {
  top: 16.98%;
  right: 5.33%;
  width: 21.87%;
  height: 2.86%;
  font-size: 36rpx;
  position: absolute;
}
.bs-p_score_photo {
  height: 3.49%;
  width: 28.53%;
  top: 12.38%;
  left: 23.07%;
  position: absolute;
}

.bs-e_score_photo {
  height: 3.02%;
  width: 28.53%;
  top: 12.54%;
  right: 23.07%;
  position: absolute;
}
.bs-pScore-div {
  top: 7.14%;
  left: 31.47%;
  position: absolute;
  font-size: 24px;
  color: #ffffff;
}

.bs-eScore-div {
  top: 7.14%;
  right: 31.47%;
  position: absolute;
  font-size: 24px;
  color: #ffffff;
}

.bs-question-card-div {
  width: 85.33%;
  height: 70.79%; /**/
  top: 22.86%;
  left: 7.33%;
  position: absolute;
}

/*
 * 分数环的效果
 */
.topBox {
  height: 50%;
  width: 100%;
  top: 0;
  right: 0;
  position: absolute;
  overflow: hidden;
  margin: 0;
  padding: 0;
}
.topCircle {
  margin: 0;
  padding: 0;
  height: 208%;
  width: 100%;
  top: 0;
  right: 0;
  position: absolute;
  /*border-radius: 50%;
	border: 7rpx solid transparent;
	border-top: 7rpx solid #FFFFFF;
	border-left: 7rpx solid #FFFFFF;*/
}
.bottomBox {
  margin: 0;
  padding: 0;
  height: 50%;
  width: 100%;
  bottom: 0;
  right: 0;
  position: absolute;
  overflow: hidden;
}
.bottomCircle {
  margin: 0;
  padding: 0;
  height: 208%;
  width: 100%;
  right: 0;
  bottom: 0;
  position: absolute;
  /*border-radius: 50%;
	border: 7rpx solid transparent;	
	border-bottom: 7rpx solid #FFFFFF;
	border-right: 7rpx solid #FFFFFF;*/
}
.c1 {
  height: 50%;
  width: 100%;
  top: 0;
  left: 0;
  position: absolute;
}
.c2 {
  height: 50%;
  width: 100%;
  bottom: 0;
  left: 0;
  position: absolute;
}
.bs-cut-down-div {
  height: 8.89%;
  width: 14.4%;
  left: 42.8%;
  top: 18.89%;
  position: absolute;
}
</style>