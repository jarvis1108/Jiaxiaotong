package com.dxtwangxiao.strongestsuperscholar.web.websocket.group;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.dxtwangxiao.strongestsuperscholar.module.system.entity.User;
import com.dxtwangxiao.strongestsuperscholar.module.system.entity.UserRelInfo;
import com.dxtwangxiao.strongestsuperscholar.module.system.service.UserRelInfoService;
import com.dxtwangxiao.strongestsuperscholar.module.system.service.UserService;
import com.dxtwangxiao.strongestsuperscholar.web.dto.MatchRecordDTO;
import com.dxtwangxiao.strongestsuperscholar.web.dto.UserDTO;
import com.dxtwangxiao.strongestsuperscholar.module.question.vo.MultipleQuestion;
import com.dxtwangxiao.strongestsuperscholar.web.util.UUIDUtil;
import com.dxtwangxiao.strongestsuperscholar.web.vo.ResultData;
import com.dxtwangxiao.strongestsuperscholar.web.websocket.common.MatchManagement;
import com.dxtwangxiao.strongestsuperscholar.web.websocket.common.Message;
import org.springframework.beans.BeanUtils;
import org.springframework.context.ApplicationContext;
import org.springframework.web.socket.*;
import org.w3c.dom.Text;
import org.w3c.dom.stylesheets.LinkStyle;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * 群PK WebSocket处理类，真正的匹配及出题业务逻辑在此
 * <p>
 * Created By Devin
 * 2018-08-29 上午 09:05
 */
public class GroupWebSocketHandler implements WebSocketHandler {

    // 启动类set方法注入，解决无法注入Bean的问题
    private static ApplicationContext applicationContext;

    public static void setApplicationContext(ApplicationContext context) {
        applicationContext = context;
    }

    private static final Map<String, WebSocketSession> users;    // 用户列表

    static {
        users = new ConcurrentHashMap<>();
    }


    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        // 1.从session中获取当前用户ID和战局Id
        String userId = (String) session.getAttributes().get("userId");
        String matchId = (String) session.getAttributes().get("MATCH_ID");

        // 2.根据用户ID获取其信息
        UserService userService = applicationContext.getBean(UserService.class);
        UserDTO userDTO = userService.getUserDTOById(userId);

        // 3.如果用户存在，则将其加入到在线用户列表
        if (userDTO != null) {
            users.put(userId, session);
        } else {
            return;
        }

        // 4.判断战局是否达到最大人数
        MatchRecordDTO matchRecordDTO = MatchManagement.getInstance().getMatchByMatchId(matchId);
        if (matchRecordDTO.getUserMaxCount().intValue() == matchRecordDTO.getUserFactCount().intValue()) {
            Message message = new Message();
            message.setMsgType("Z");
            message.setMsgDesc("战局达到最大人数");
            message.setMsgID(UUID.randomUUID().toString());
            message.setMsgData(null);
            sendMessageToUser(userId, new TextMessage(JSON.toJSONString(message)));
            return;
        }

        // 5.更新战局信息
        if (matchRecordDTO.getUserId().equals(userId)) {
            MatchManagement.getInstance().addUser(matchId, userDTO, Byte.valueOf("1"));
        } else {
            List<UserDTO> userDTOList = matchRecordDTO.getUserList();
            // 将自己信息发给战局内的其他用户
            Message message = new Message();
            message.setMsgType("A");
            message.setMsgDesc("用户信息");
            message.setMsgID(UUID.randomUUID().toString());
            Map<String, Object> curData = new HashMap<>();
            curData.put("user", userDTO);
            curData.put("matchId", matchId);
            message.setMsgData(new ResultData(curData));
            sendMessageToList(userDTOList, new TextMessage(JSON.toJSONString(message)));

            // 将战局中的其他用户信息发给自己
            curData.remove("user");
            curData.put("userList", userDTOList);
            sendMessageToUser(userId, new TextMessage(JSON.toJSONString(message)));
            MatchManagement.getInstance().addUser(matchId, userDTO, Byte.valueOf("0"));
            matchRecordDTO.setFightStatus(Byte.valueOf("1"));
        }

        // 6.初始化战局各用户分数
        matchRecordDTO.getMatchScoreMap().put(userId,0);
    }

    @Override
    public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
        String userId = (String) session.getAttributes().get("MATCH_USER_ID");

        JSONObject jsonObject = JSON.parseObject(message.getPayload().toString());
        String msgType = jsonObject.getString("msgType");
        JSONObject msgData = jsonObject.getJSONObject("msgData");

        if (msgType.equals("A")) {
            String matchId = msgData.getString("matchId");
            Integer no = msgData.getInteger("no");

            // (1)根据战局ID获取战局记录，进而获取战局题目
            MatchRecordDTO match = MatchManagement.getInstance().getMatchByMatchId(matchId);
            MultipleQuestion multipleQuestion = match.getQuestionList().get(no - 1);

            // (2)向客户端发送消息，表明出题成功
            Message result = new Message();
            result.setMsgID(UUID.randomUUID().toString());
            result.setMsgType("B");
            Map<String, Object> curData = new HashMap<>();
            curData.put("question", multipleQuestion);
            result.setMsgData(new ResultData(curData));
            result.setMsgDesc("出题成功");
            sendMessageToUser(userId, new TextMessage(JSON.toJSONString(result)));
        }

        if (msgType.equals("B")) {
            String matchId = msgData.getString("matchId");
            String correctAnswer = msgData.getString("correctAnswer");
            String userAnswer = msgData.getString("userAnswer");
            Integer timeLeft = msgData.getInteger("timeLeft");
            Integer questionIndex = msgData.getInteger("no");

            // 存储用户学点消耗到数据库
            Integer amount = 10 - timeLeft;
            Byte isTrue;
            if (userAnswer.equals(correctAnswer)) {
                isTrue = Byte.valueOf("1");
            } else {
                isTrue = Byte.valueOf("0");
            }
            MatchManagement.getInstance().saveLpConsumeRecord(matchId, userId, questionIndex, userAnswer, amount, isTrue);

            // 计算分数并存储
            int score;
            if (correctAnswer.equals(userAnswer)) {
                score = timeLeft * (200 / 10);
            } else {
                score = 0;
            }
            MatchManagement.getInstance().addScore(matchId, userId, score);

            //如果答题人数与在线人数不符
            MatchRecordDTO match = MatchManagement.getInstance().getMatchByMatchId(matchId);
            if (match.getAnsweredCount() == match.getUserList().size()){
                Message result1 = new Message();
                result1.setMsgID(UUIDUtil.getUUID());
                result1.setMsgType("Z");
                result1.setMsgDesc("答题人数与在线人数不符!");
                sendMessageToUser(userId,new TextMessage(JSON.toJSONString(result1)));
                return;
            }

            /*// 向客户端发送消息
            Message result = new Message();
            result.setMsgID(UUID.randomUUID().toString());
            result.setMsgType("C-1");
            Map<String, Object> curData = new HashMap<>();
            curData.put("score", score);
            result.setMsgData(new ResultData(curData));
            result.setMsgDesc("发送给用户的成绩");
            sendMessageToUser(userId, new TextMessage(JSON.toJSONString(result)));*/

            // 增加答完题人数
            MatchManagement.getInstance().addAnsweredCountForMatch(matchId);
            // 所有用户已经答完题
            if (match.getAnsweredCount() == match.getUserList().size() ){
                //通知所有用户可以请求下一题
                Message result2 = new Message();
                result2.setMsgID(UUIDUtil.getUUID());
                result2.setMsgType("D");
                result2.setMsgDesc("可以请求下一题");
                sendMessageToList(match.getUserList(),new TextMessage(JSON.toJSONString(result2)));

                //初始化答完题人数为零
                MatchManagement.getInstance().initAnsweredCountForMatch(matchId);
            }
        }
        //发送最终成绩给所有用户
        if ("F".equals(msgType)){
            String matchId = msgData.getString("matchId");
            Message result = new Message();
            result.setMsgID(UUIDUtil.getUUID());
            result.setMsgType("E");
            result.setMsgDesc("战局各用户的成绩");
            result.setMsgData(new ResultData(MatchManagement.getInstance().getMatchByMatchId(matchId).getMatchScoreMap()));
            sendMessageToUser(userId, new TextMessage(JSON.toJSONString(result)));
        }
    }

    @Override
    public void handleTransportError(WebSocketSession webSocketSession, Throwable throwable) throws Exception {

    }

    @Override
    public void afterConnectionClosed(WebSocketSession webSocketSession, CloseStatus closeStatus) throws Exception {

    }

    @Override
    public boolean supportsPartialMessages() {
        return false;
    }

    private void sendMessageToUser(String userId, TextMessage message) {
        if (users.get(userId) == null) return;
        WebSocketSession session = users.get(userId);
        if (!session.isOpen()) return;

        try {
            session.sendMessage(message);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void sendMessageToList(List<UserDTO> list, TextMessage message) {
        for (UserDTO userDTO : list) {
            String userId = userDTO.getUserId();
            if (users.get(userId) == null) continue;
            WebSocketSession session = users.get(userId);
            if (!session.isOpen()) continue;

            try {
                session.sendMessage(message);
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
}
