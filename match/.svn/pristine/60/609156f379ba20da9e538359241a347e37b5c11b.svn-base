package com.dxtwangxiao.strongestsuperscholar.web.controller.question;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.dxtwangxiao.strongestsuperscholar.module.question.entity.Question;
import com.dxtwangxiao.strongestsuperscholar.module.question.service.QuestionService;
import com.dxtwangxiao.strongestsuperscholar.web.util.WebUtil;
import com.dxtwangxiao.strongestsuperscholar.web.util.commconstant.CommConst;
import com.dxtwangxiao.strongestsuperscholar.web.vo.ErrorInfo;
import com.dxtwangxiao.strongestsuperscholar.web.vo.RequestInfo;
import com.dxtwangxiao.strongestsuperscholar.web.vo.ResponseInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * @auther: shenhao
 * @descripition: 题目控制器类
 * @date 2018\6\29 0029
 */
@RestController
@RequestMapping("/qst/Question")
public class QuestionController {

    @Autowired
    private QuestionService questionService;

    /**
     *获取题目列表
     * @param pageSize    页大小
     * @param currentPage 当前页数，从1开始
     * @param request     Http请求
     * @return
     */
    @GetMapping("/list")
    public ResponseInfo GetQuestionList(Integer pageSize, Integer currentPage,HttpServletRequest request)throws ErrorInfo {
        RequestInfo requestInfo=WebUtil.parseGetRequest(request);
        List<Question> retList;
        if(pageSize == null||currentPage == null){
            retList =questionService.findAll();
        }else if(pageSize <=0 || currentPage <=0){
            return new ResponseInfo(requestInfo, CommConst.ERR_REQ_PARAM.getCode(), CommConst.ERR_REQ_PARAM.getMessage(), null);

        }else {
            retList = questionService.getQuestionList(pageSize,currentPage);
        }

        return new ResponseInfo(requestInfo, retList);
    }

    /**
     * 编辑信题目息
     * @param requestInfo 请求体中的请求信息
     * @return
     */
    @PostMapping("/edit")
    public ResponseInfo editQuestion(@RequestBody RequestInfo requestInfo)throws ErrorInfo{
        JSONObject reqParam = requestInfo.getReqParam();
        if (reqParam.getString("questionId") == null) {
            // 必须传入题目id
            return new ResponseInfo(requestInfo, CommConst.ERR_REQ_PARAM.getCode(), CommConst.ERR_REQ_PARAM.getMessage(), null);
        }
        Question toUpdate = JSON.parseObject(reqParam.toJSONString(),Question.class);
        Question question = questionService.update(toUpdate);
        return new ResponseInfo(requestInfo,question);

    }

    /**
     * 添加题目
     * @param requestInfo
     * @return
     * @throws ErrorInfo
     */
    @PostMapping("/add")
    public ResponseInfo addQuestion(@RequestBody RequestInfo requestInfo)throws ErrorInfo{
        JSONObject reqParam = requestInfo.getReqParam();
        if(reqParam.getString("questionId")==null){
            return new ResponseInfo(requestInfo, CommConst.ERR_REQ_PARAM.getCode(), CommConst.ERR_REQ_PARAM.getMessage(), null);
        }
        Question toAdd = JSON.parseObject(reqParam.toJSONString(),Question.class);
        Question question = questionService.create(toAdd);
        return new ResponseInfo(requestInfo,question);
    }

    /**
     * 根据questionId删除题目
     * @param requestInfo
     * @return
     */
    @PostMapping("/rmQuestion")
    public ResponseInfo deleteQuestion(@RequestParam("questionId") String questionId,@RequestBody RequestInfo requestInfo)throws ErrorInfo{
        questionService.deleteQuestionById(questionId);
        return new ResponseInfo(requestInfo, CommConst.ERR_SUCCESS.getCode(), CommConst.ERR_SUCCESS.getMessage(), null);
    }


}
