<template>
  <div class="st-battle-main-container">
    <friendWaiting
      v-if="step === 'A'"
      :user="userInfo"
      :isCreator="isCreator"
      :friend="friendInfo"
      :matchId="matchId"
      :waitFriend="waitFriend"
      @waitTimeOut="waitTimeOut"
      @giveUpBattle="giveUpBattle"
      @beginBattle="startBattle">
    </friendWaiting>
    
    <friendReady
      v-else-if="step === 'A-0'"
      :userInfo="userInfo"
      :opponentInfo="friendInfo"
      :close="sendMessage">
    </friendReady>

    <battle
      v-else-if="questionIndex < 6"
      :userInfo="userInfo"
      :userScore="userScore"
      :opponentAnswer="opponentAnswer" 
      :opponentInfo="friendInfo"
      :question="question"
      :questionIndex="questionIndex"
      :nextQuestion="sendMessage"
      :waitUser="waitUser"
      :waitOpponent="waitOpponent"
      @userAnswered="changeUserAnswer"
      @cutdownout="cutDownOut">
    </battle>

    <friendResult
      v-else
      :resultType="true"
      :userInfo="userInfo"
      :opponentInfo="friendInfo"
      :matchId="matchId"
      :isCreator="isCreator"
      :userScore="userScore"
      :opponentScore="opponentScore"
      :userCorrectNum="userCorrectNum"
      :opponentCorrectNum="opponentCorrectNum"
      :userLearningPoit="userLearningPoit">
    </friendResult>
  </div>
</template>

<script>
import friendWaiting from "../../components/friend-pk-waiting.vue";
import friendReady from "../../components/battle-ready.vue";
import battle from "../../components/battle.vue";
import friendResult from "../../components/battle-result.vue";
import wxs from "../../utils/wx";
import { socketUrl } from "../../config";
import { getuuid } from "../../utils/RequestObj";
export default {
  components: {
    friendWaiting, //等待页
    friendReady, //准备页
    battle, //对战页
    friendResult //结果页
  },
  data() {
    return {
      userInfo: {}, //用户信息
      friendInfo: {}, //对手信息
      matchId: "", //战局id
      isCreator: true, //当前用户是否是战局创建者
      step: "", //标明战局状态，与返回消息类型匹配
      questionIndex: 0, //题目序号
      question: {}, //试题
      userScore: 0, //用户分数
      opponentScore: 0, //对手分数
      userCorrectNum: 0, //用户答对题数
      opponentCorrectNum: 0, //对手答对题数
      userLearningPoit: 0, //用户消耗学点数
      userAnswer: {
        //用户单题的答案信息
        answer: "",
        timeLeft: ""
      },
      opponentAnswer: {
        score: 0,
        answer: ""
      }, //对手单题的答案信息
      waitUser: true, //等待用户答题
      waitOpponent: true, //等待对手答题
      waitFriend: true, //等待好友加入
      socket: null //网络连接
    };
  },
  async onLoad(option) {
    //进入该页面则创建一个战局，又客户端生成战局Id
    this.userInfo = this.$store.state.userInfo;
    this.isCreator = parseInt(option.isCreator) === 1 ? true : false;
    this.friendInfo = {};
    this.step = "A";
    this.waitFriend = true;
    this.waitOpponent = true;
    this.waitUser = true;
    this.questionIndex = 0;
    if (option.matchId) {
      this.matchId = option.matchId;
      console.log("拿到参数传递的战局id是：" + this.matchId);
    } else {
      this.matchId = await this.$store.dispatch("createBattle", {
        battleType: 1
      });
      console.log("创建的战局id是：" + this.matchId);
    }
    //建立webSocket
    this.startMatch();
  },
  watch: {
    questionIndex() {
      this.opponentAnswer = {
        score: 0,
        answer: ""
      };
    },
    waitUser() {
      setTimeout(() => {
        if (!this.waitUser && !this.waitOpponent) {
          this.waitUser = true;
          this.waitOpponent = true;
          this.sendMessage();
        }
      }, 1000);
    },
    waitOpponent() {
      setTimeout(() => {
        if (!this.waitUser && !this.waitOpponent) {
          this.waitUser = true;
          this.waitOpponent = true;
          this.sendMessage();
        }
      }, 1000);
    }
  },
  methods: {
    //发起者点击开始对战
    startBattle() {
      this.sendMessage();
    },
    //等待时间超时，销毁房间和对战id
    waitTimeOut() {
      wx.closeSocket();
      wxs.navigateBack(0);
    },
    //用户/好友放弃对战
    giveUpBattle() {
      wxs.navigateBack(0);
    },
    //接收用户答题结果
    changeUserAnswer(data) {
      this.userAnswer = data;
      this.userLearningPoit += 10 - data.timeLeft;
      this.waitUser = false;
      this.sendMessage();
    },
    startMatch() {
      let that = this;
      wx.connectSocket({
        url: `${socketUrl}/pk?userId=${this.userInfo.userId}&matchId=${
          this.matchId
        }`
      });

      wx.onSocketOpen(res => {
        console.log("连接已建立");
      });

      wx.onSocketMessage(res => {
        this.receiveMessage(res);
      });

      wx.onSocketClose(function(res) {
        // 监听WebSocket关闭。
          console.log("Websocket关闭");
      });
    },
    //接收服务器消息并处理
    receiveMessage(res) {
      var result = JSON.parse(res.data);
      console.log("接收到服务器的消息:" + res.data);
      this.step = result.msgType;
      if (result.msgType === "A") {
        // 服务器返回消息类型为A，表示好友已进入,拿到好友信息
        this.friendInfo = result.msgData.curData.friend;
        this.waitFriend = false;
        console.log("好友信息是：" + JSON.stringify(this.friendInfo));
      } else if (result.msgType === "A-0") {
        console.log("开始对战");
      } else if (result.msgType === "B") {
        console.log("拿到题目");
        this.question = result.msgData.curData.question;
      } else if (result.msgType === "C-1") {
        this.userScore += result.msgData.curData.score;
        if (result.msgData.curData.score > 0) {
          //用户答对
          this.userCorrectNum += 1;
        }
      } else if (result.msgType === "C-2") {
        this.opponentAnswer = {
          score: result.msgData.curData.score,
          answer: result.msgData.curData.answer
        };
        this.opponentScore += this.opponentAnswer.score;
        if (this.opponentAnswer.score > 0) this.opponentCorrectNum += 1;
        this.waitOpponent = false;
      }
    },
    //根据战局状态像服务器端发送消息
    sendMessage() {
      console.log("sendMessage is called" + this.waitUser + this.waitOpponent);
      // 发起者点击开始对战
      if (this.step === "A") {
        wx.sendSocketMessage({
          data: JSON.stringify({
            msgID: getuuid(),
            msgType: "A-0",
            msgData: {
              matchId: this.matchId
            },
            msgDesc: "请求开始对战"
          })
        });
      } else if (this.waitUser && this.waitOpponent) {
        console.log("发送消息，请求出题");
        //用户和对手都未答题时发送信息为请求题目
        this.questionIndex += 1;
        console.log("接下来请求的题号是：" + this.questionIndex);
        wx.sendSocketMessage({
          data: JSON.stringify({
            msgID: getuuid(),
            msgType: "A",
            msgData: {
              matchId: this.matchId,
              no: this.questionIndex
            },
            msgDesc: "请求出题"
          })
        });
        console.log("请求出题消息已发送");
      } else if (!this.waitUser) {
        //用户答题完毕，计算分数
        wx.sendSocketMessage({
          data: JSON.stringify({
            msgID: getuuid(),
            msgType: "B",
            msgData: {
              matchId: this.matchId,
              correctAnswer: this.question.answer,
              userAnswer: this.userAnswer.answer,
              timeLeft: this.userAnswer.timeLeft,
              no: this.questionIndex
            },
            msgDesc: "请求计算当前分数和返回结果"
          })
        });
      }
    }
  },
  onShareAppMessage(res) {
    console.log("分享的战局id是：" + this.matchId);
    return {
      title:"最强学霸分享",
      desc: this.userInfo.wechatName + "向你发出了智商pk，点击应战！",
      path: `/pages/index/main?matchId=${this.matchId}&isCreator=0`,
      imageUrl:'/static/images/friendPk/share-bg.png'
    };
  }
};
</script>

<style scoped>
</style>