/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 27 03:09:11 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.IterableUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IterableUtils_ESTest extends IterableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PredicatedBag<Integer>[] predicatedBagArray0 = (PredicatedBag<Integer>[]) Array.newInstance(PredicatedBag.class, 5);
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      assertNotNull(hashBag0);
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      PredicatedBag<Integer> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Integer>) hashBag0, (Predicate<? super Integer>) transformerPredicate0);
      assertNotNull(predicatedBag0);
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      predicatedBagArray0[0] = predicatedBag0;
      PredicatedBag<Integer> predicatedBag1 = PredicatedBag.predicatedBag((Bag<Integer>) predicatedBag0, (Predicate<? super Integer>) transformerPredicate0);
      assertNotNull(predicatedBag1);
      assertNotSame(predicatedBag0, predicatedBag1);
      assertNotSame(predicatedBag1, predicatedBag0);
      assertTrue(predicatedBag1.equals((Object)predicatedBag0));
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      predicatedBagArray0[1] = predicatedBag1;
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      PredicatedSortedBag<Integer> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Integer>) treeBag0, (Predicate<? super Integer>) transformerPredicate0);
      assertNotNull(predicatedSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      predicatedBagArray0[2] = (PredicatedBag<Integer>) predicatedSortedBag0;
      PredicatedSortedBag<Integer> predicatedSortedBag1 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Integer>) treeBag0, (Predicate<? super Integer>) transformerPredicate0);
      assertNotNull(predicatedSortedBag1);
      assertNotSame(predicatedSortedBag1, predicatedSortedBag0);
      assertTrue(predicatedSortedBag1.equals((Object)predicatedSortedBag0));
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      predicatedBagArray0[3] = (PredicatedBag<Integer>) predicatedSortedBag0;
      PredicatedBag<Integer> predicatedBag2 = PredicatedBag.predicatedBag((Bag<Integer>) hashBag0, (Predicate<? super Integer>) transformerPredicate0);
      assertNotNull(predicatedBag2);
      assertNotSame(predicatedBag2, predicatedBag0);
      assertNotSame(predicatedBag2, predicatedBag1);
      assertTrue(predicatedBag2.equals((Object)predicatedBag1));
      assertTrue(predicatedBag2.equals((Object)predicatedBag0));
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      predicatedBagArray0[4] = predicatedBag2;
      FluentIterable<PredicatedBag<Integer>> fluentIterable0 = FluentIterable.of(predicatedBagArray0);
      assertNotNull(fluentIterable0);
      assertEquals(5, predicatedBagArray0.length);
      
      FluentIterable<PredicatedBag<Integer>> fluentIterable1 = fluentIterable0.loop();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(5, predicatedBagArray0.length);
      
      FluentIterable<PredicatedBag<Integer>> fluentIterable2 = fluentIterable0.unmodifiable();
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertEquals(5, predicatedBagArray0.length);
      
      FluentIterable<PredicatedBag<Integer>> fluentIterable3 = fluentIterable2.zip((Iterable<? extends PredicatedBag<Integer>>) fluentIterable1);
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertEquals(5, predicatedBagArray0.length);
      
      FluentIterable<PredicatedBag<Integer>> fluentIterable4 = fluentIterable3.limit(1838L);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertEquals(5, predicatedBagArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<PredicatedBag<Integer>> treeBag1 = new TreeBag<PredicatedBag<Integer>>(comparator0);
      assertFalse(treeBag1.contains(predicatedBag0));
      assertNotNull(treeBag1);
      assertEquals(0, treeBag1.size());
      assertTrue(treeBag1.isEmpty());
      
      SynchronizedSortedBag<PredicatedBag<Integer>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<PredicatedBag<Integer>>) treeBag1);
      assertFalse(treeBag1.contains(predicatedBag0));
      assertFalse(synchronizedSortedBag0.contains(predicatedBag0));
      assertNotNull(synchronizedSortedBag0);
      assertEquals(0, treeBag1.size());
      assertTrue(treeBag1.isEmpty());
      
      Factory<SynchronizedBag<PredicatedBag<Integer>>> factory0 = ConstantFactory.constantFactory((SynchronizedBag<PredicatedBag<Integer>>) synchronizedSortedBag0);
      assertFalse(treeBag1.contains(predicatedBag0));
      assertFalse(synchronizedSortedBag0.contains(predicatedBag0));
      assertNotNull(factory0);
      assertEquals(0, treeBag1.size());
      assertTrue(treeBag1.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends PredicatedBag<Integer>>) fluentIterable4, factory0, (Predicate<? super PredicatedBag<Integer>>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      Transformer<Object, Locale.Category> transformer0 = (Transformer<Object, Locale.Category>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.unique();
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashBag<PredicatedBag<Object>>[] hashBagArray0 = (HashBag<PredicatedBag<Object>>[]) Array.newInstance(HashBag.class, 3);
      HashBag<PredicatedBag<Object>> hashBag0 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag0);
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      hashBagArray0[0] = hashBag0;
      HashBag<PredicatedBag<Object>> hashBag1 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag1);
      assertTrue(hashBag1.equals((Object)hashBag0));
      assertEquals(0, hashBag1.size());
      assertTrue(hashBag1.isEmpty());
      
      hashBagArray0[1] = hashBag1;
      HashBag<PredicatedBag<Object>> hashBag2 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag2);
      assertTrue(hashBag2.equals((Object)hashBag1));
      assertTrue(hashBag2.equals((Object)hashBag0));
      assertTrue(hashBag2.isEmpty());
      assertEquals(0, hashBag2.size());
      
      hashBagArray0[2] = hashBag2;
      FluentIterable<HashBag<PredicatedBag<Object>>> fluentIterable3 = FluentIterable.of(hashBagArray0);
      assertNotNull(fluentIterable3);
      assertEquals(3, hashBagArray0.length);
      
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable2.collate((Iterable<? extends Locale.Category>) fluentIterable0, (Comparator<? super Locale.Category>) comparator0);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      
      HashBag<Locale.LanguageRange> hashBag3 = new HashBag<Locale.LanguageRange>();
      assertNotNull(hashBag3);
      assertEquals(0, hashBag3.size());
      assertTrue(hashBag3.isEmpty());
      
      SynchronizedCollection<Locale.LanguageRange> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Locale.LanguageRange>) hashBag3);
      assertNotNull(synchronizedCollection0);
      assertEquals(0, hashBag3.size());
      assertTrue(hashBag3.isEmpty());
      
      FluentIterable<Locale.LanguageRange> fluentIterable5 = FluentIterable.of((Iterable<Locale.LanguageRange>) synchronizedCollection0);
      assertNotNull(fluentIterable5);
      assertEquals(0, hashBag3.size());
      assertTrue(hashBag3.isEmpty());
      
      boolean boolean0 = fluentIterable3.contains(synchronizedCollection0);
      assertFalse(boolean0);
      assertEquals(3, hashBagArray0.length);
      assertEquals(0, hashBag3.size());
      assertTrue(hashBag3.isEmpty());
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = IterableUtils.isEmpty(fluentIterable3);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, hashBagArray0.length);
      
      CollectionBag<LinkedList<Locale.Category>> collectionBag0 = null;
      try {
        collectionBag0 = new CollectionBag<LinkedList<Locale.Category>>((Bag<LinkedList<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      Iterable<Locale.LanguageRange>[] iterableArray0 = (Iterable<Locale.LanguageRange>[]) Array.newInstance(Iterable.class, 8);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<Locale.LanguageRange> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$LanguageRange]", serviceLoader0.toString());
      
      iterableArray0[0] = (Iterable<Locale.LanguageRange>) serviceLoader0;
      // Undeclared exception!
      try { 
        IterableUtils.transformedIterable(iterableArray0[0], (Transformer<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull((Iterable<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.limit(1709L);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.unique();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable3.append((Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.unmodifiable();
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      
      iterableArray0[0] = (Iterable<Locale.Category>) fluentIterable5;
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable2.skip(1709L);
      assertNotNull(fluentIterable6);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable6.equals((Object)fluentIterable0));
      assertFalse(fluentIterable6.equals((Object)fluentIterable1));
      assertFalse(fluentIterable6.equals((Object)fluentIterable4));
      assertFalse(fluentIterable6.equals((Object)fluentIterable5));
      assertFalse(fluentIterable6.equals((Object)fluentIterable3));
      assertFalse(fluentIterable6.equals((Object)fluentIterable2));
      
      Iterable<Locale.Category> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>) fluentIterable2, (Iterable<? extends Locale.Category>) fluentIterable1);
      assertNotNull(iterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      
      iterableArray0[1] = iterable0;
      Iterable<Locale.Category> iterable1 = IterableUtils.reversedIterable(iterable0);
      assertNotNull(iterable1);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(iterable1.equals((Object)iterable0));
      
      iterableArray0[2] = iterable1;
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(0, 0);
      assertFalse(vector0.contains(locale_Category0));
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      iterableArray0[3] = (Iterable<Locale.Category>) vector0;
      IterableUtils.checkNotNull(iterableArray0);
      assertEquals(4, iterableArray0.length);
      
      // Undeclared exception!
      try { 
        IterableUtils.uniqueIterable((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "WZ";
      stringArray0[2] = "";
      stringArray0[3] = "R})z4vFCK5kUCxznr";
      stringArray0[4] = "kLwR>u8eTP]5/~C_";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      assertNotNull(fluentIterable0);
      assertEquals(5, stringArray0.length);
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(5, stringArray0.length);
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.zip((Iterable<? extends String>) fluentIterable0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertEquals(5, stringArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, (Object) null).when(transformer1).transform(any());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate0);
      
      int int0 = IterableUtils.size(fluentIterable0);
      assertEquals(5, int0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertEquals(5, stringArray0.length);
      
      FluentIterable<String> fluentIterable3 = fluentIterable1.unmodifiable();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(5, stringArray0.length);
      
      String string0 = IterableUtils.find((Iterable<String>) fluentIterable2, (Predicate<? super String>) transformerPredicate0);
      assertNotNull(string0);
      assertEquals("kLwR>u8eTP]5/~C_", string0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<UnmodifiableBag<PredicatedBag>>) fluentIterable1, (Predicate<? super UnmodifiableBag<PredicatedBag>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[3] = "WZ";
      stringArray0[2] = "";
      stringArray0[3] = "R})z4vFCK5kUCxznr";
      stringArray0[4] = "kLwR>u8eTP]5/~C_";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      assertNotNull(fluentIterable0);
      assertEquals(5, stringArray0.length);
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable1 = new FluentIterable<String>();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.zip((Iterable<? extends String>) fluentIterable0);
      assertNotNull(fluentIterable2);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertEquals(5, stringArray0.length);
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate0);
      
      FluentIterable<String> fluentIterable3 = fluentIterable1.unmodifiable();
      assertNotNull(fluentIterable3);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      
      // Undeclared exception!
      try { 
        IterableUtils.find((Iterable<String>) fluentIterable2, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterable<Object> iterable0 = IterableUtils.boundedIterable((Iterable<Object>) arrayList0, 3792L);
      assertFalse(arrayList0.contains(3792L));
      assertNotNull(iterable0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterable<Object> iterable1 = IterableUtils.skippingIterable(iterable0, 3792L);
      assertFalse(arrayList0.contains(3792L));
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Predicate<Object> predicate1 = IterableUtils.find((Iterable<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate0);
      assertNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      TreeBag<TransformedBag<String>> treeBag1 = new TreeBag<TransformedBag<String>>();
      assertNotNull(treeBag1);
      assertEquals(0, treeBag1.size());
      assertTrue(treeBag1.isEmpty());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<TransformedBag<String>>) treeBag1, (Transformer<? super TransformedBag<String>, String>) transformer0, "MaxSize parameter must not be negative.", "org.apache.commons.collections4.functors.NullIsExceptionPredicate", "' rejected it");
      assertNotNull(string0);
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate' rejected it", string0);
      assertEquals(0, treeBag1.size());
      assertTrue(treeBag1.isEmpty());
      
      Iterable<Locale.Category> iterable2 = null;
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends Locale.Category>) null, (Iterable<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.limit(1709L);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.unique();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable3.append((Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.unmodifiable();
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      
      iterableArray0[1] = (Iterable<Locale.Category>) fluentIterable0;
      Iterable<Locale.Category> iterable0 = IterableUtils.reversedIterable((Iterable<Locale.Category>) fluentIterable1);
      assertNotNull(iterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      
      iterableArray0[2] = iterable0;
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(0, 0);
      assertFalse(vector0.contains(locale_Category0));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull(iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>(treeBag0);
      assertNotNull(priorityQueue0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, priorityQueue0.size());
      
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = priorityQueue0.add(instanceofPredicate0);
      assertFalse(treeBag0.contains(instanceofPredicate0));
      assertTrue(priorityQueue0.contains(instanceofPredicate0));
      assertTrue(boolean0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(1, priorityQueue0.size());
      
      Iterable<Object> iterable0 = IterableUtils.chainedIterable((Iterable<?>) priorityQueue0, (Iterable<?>) priorityQueue0, (Iterable<?>) priorityQueue0);
      assertFalse(treeBag0.contains(instanceofPredicate0));
      assertTrue(priorityQueue0.contains(instanceofPredicate0));
      assertNotNull(iterable0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = IterableUtils.matchesAll((Iterable<InstanceofPredicate>) priorityQueue0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertFalse(treeBag0.contains(instanceofPredicate0));
      assertTrue(priorityQueue0.contains(instanceofPredicate0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(1, priorityQueue0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      assertNotNull(fluentIterable0);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.limit(2769L);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      // Undeclared exception!
      try { 
        IterableUtils.collatedIterable((Comparator<? super Integer>) comparator1, (Iterable<? extends Integer>) fluentIterable1, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IterableUtils.matchesAll((Iterable<TransformedBag<Object>>) null, (Predicate<? super TransformedBag<Object>>) predicate0);
      assertTrue(boolean0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Integer integer0 = new Integer((-1037));
      assertNotNull(integer0);
      assertEquals((-1037), (int)integer0);
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertFalse(treeSet0.contains((-1037)));
      assertTrue(priorityQueue0.contains((-1037)));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<Integer>) priorityQueue0, (Transformer<? super Integer, String>) null, "", "", "VA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Integer integer0 = new Integer(58);
      assertNotNull(integer0);
      assertEquals(58, (int)integer0);
      
      boolean boolean0 = treeBag0.add(integer0);
      assertTrue(treeBag0.contains(58));
      assertTrue(boolean0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.forEach((Iterable<String>) null, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(1);
      assertNotNull(vector0);
      assertEquals(1, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Factory<CollectionSortedBag<Object>> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<?>) vector0, factory0, (Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-370));
      assertFalse(arrayDeque0.contains((-370)));
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Integer integer0 = new Integer((-370));
      assertNotNull(integer0);
      assertEquals((-370), (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertTrue(arrayDeque0.contains((-370)));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      Integer integer1 = arrayDeque0.remove();
      assertFalse(arrayDeque0.contains(integer1));
      assertNotNull(integer1);
      assertEquals((-370), (int)integer1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      boolean boolean1 = arrayDeque0.add(integer2);
      assertTrue(arrayDeque0.contains(4));
      assertFalse(arrayDeque0.contains(integer1));
      assertTrue(boolean1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      String string0 = IterableUtils.toString((Iterable<Integer>) arrayDeque0, (Transformer<? super Integer, String>) transformer0, "g0MB^f", "=3UxE5'x'Gp5YHu|U", "=3UxE5'x'Gp5YHu|U");
      assertTrue(arrayDeque0.contains(4));
      assertFalse(arrayDeque0.contains(integer1));
      assertNotNull(string0);
      assertEquals("=3UxE5'x'Gp5YHu|Unull=3UxE5'x'Gp5YHu|U", string0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      int int0 = IterableUtils.size(arrayDeque0);
      assertTrue(arrayDeque0.contains(4));
      assertFalse(arrayDeque0.contains(integer1));
      assertEquals(1, int0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.append(locale_CategoryArray0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(7, locale_CategoryArray0.length);
      
      Transformer<Locale.Category, Boolean> transformer1 = (Transformer<Locale.Category, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(transformer1).transform(any(java.util.Locale.Category.class));
      Predicate<Locale.Category> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Locale.Category, Boolean>) transformer1);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<Locale.Category>) fluentIterable1, (Predicate<? super Locale.Category>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ClosureUtilsTest.MockTransformer<Object> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Object>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[8] = object1;
      FluentIterable<Object> fluentIterable0 = FluentIterable.of(objectArray0);
      assertNotNull(fluentIterable0);
      assertEquals(9, objectArray0.length);
      
      FluentIterable<Object> fluentIterable1 = fluentIterable0.loop();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      IterableUtils.toString((Iterable<CollectionBag<SynchronizedBag>>) fluentIterable1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      assertNotNull(treeSet0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = arrayList0.add(locale_Category0);
      assertTrue(arrayList0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) treeSet0);
      assertNotNull(predicate0);
      
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      java.util.function.Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      java.util.function.Predicate<Object> predicate3 = predicate2.and(predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean1 = treeSet0.removeIf(predicate3);
      assertFalse(boolean1);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(boolean1 == boolean0);
      
      Object object0 = treeSet0.pollLast();
      assertNull(object0);
      
      boolean boolean2 = treeSet0.add((Object) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = treeSet0.add(arrayList0);
      assertTrue(arrayList0.contains(locale_Category0));
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = IterableUtils.frequency((Iterable<Object>) treeSet0, (Object) treeSet0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        IterableUtils.unmodifiableIterable((Iterable<ArrayList<Locale.LanguageRange>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 5);
      iterableArray0[0] = null;
      iterableArray0[1] = null;
      iterableArray0[2] = null;
      iterableArray0[3] = null;
      iterableArray0[4] = null;
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends Integer>) null, (Iterable<? extends Integer>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) fluentIterable0;
      objectArray0[1] = (Object) fluentIterable0;
      objectArray0[2] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append(objectArray0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(3, objectArray0.length);
      
      FluentIterable<Object> fluentIterable2 = FluentIterable.of((Iterable<Object>) fluentIterable1);
      assertNotNull(fluentIterable2);
      assertSame(fluentIterable1, fluentIterable2);
      assertSame(fluentIterable2, fluentIterable1);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertEquals(3, objectArray0.length);
      
      FluentIterable<Object> fluentIterable3 = fluentIterable2.collate((Iterable<?>) fluentIterable1);
      assertNotNull(fluentIterable3);
      assertSame(fluentIterable1, fluentIterable2);
      assertSame(fluentIterable2, fluentIterable1);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(3, objectArray0.length);
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<Predicate<TreeBag>>) fluentIterable3, (Transformer<? super Predicate<TreeBag>, String>) transformer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.IterableUtils$1 cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      Transformer<Object, Locale.Category> transformer0 = (Transformer<Object, Locale.Category>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(transformer0).transform(any());
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.transform((Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.collate((Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.unique();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashBag<PredicatedBag<Object>>[] hashBagArray0 = (HashBag<PredicatedBag<Object>>[]) Array.newInstance(HashBag.class, 3);
      HashBag<PredicatedBag<Object>> hashBag0 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag0);
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      hashBagArray0[0] = hashBag0;
      HashBag<PredicatedBag<Object>> hashBag1 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag1);
      assertTrue(hashBag1.equals((Object)hashBag0));
      assertEquals(0, hashBag1.size());
      assertTrue(hashBag1.isEmpty());
      
      hashBagArray0[1] = hashBag1;
      HashBag<PredicatedBag<Object>> hashBag2 = new HashBag<PredicatedBag<Object>>();
      assertNotNull(hashBag2);
      assertTrue(hashBag2.equals((Object)hashBag0));
      assertTrue(hashBag2.equals((Object)hashBag1));
      assertTrue(hashBag2.isEmpty());
      assertEquals(0, hashBag2.size());
      
      hashBagArray0[2] = hashBag2;
      FluentIterable<HashBag<PredicatedBag<Object>>> fluentIterable4 = FluentIterable.of(hashBagArray0);
      assertNotNull(fluentIterable4);
      assertEquals(3, hashBagArray0.length);
      
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable3.collate((Iterable<? extends Locale.Category>) fluentIterable1, (Comparator<? super Locale.Category>) comparator0);
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable6 = fluentIterable5.append((Iterable<? extends Locale.Category>) fluentIterable3);
      assertNotNull(fluentIterable6);
      assertFalse(fluentIterable6.equals((Object)fluentIterable0));
      assertFalse(fluentIterable6.equals((Object)fluentIterable1));
      assertFalse(fluentIterable6.equals((Object)fluentIterable3));
      assertFalse(fluentIterable6.equals((Object)fluentIterable2));
      assertFalse(fluentIterable6.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      
      HashBag<Locale.LanguageRange> hashBag3 = new HashBag<Locale.LanguageRange>();
      assertNotNull(hashBag3);
      assertTrue(hashBag3.isEmpty());
      assertEquals(0, hashBag3.size());
      
      SynchronizedCollection<Locale.LanguageRange> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Locale.LanguageRange>) hashBag3);
      assertNotNull(synchronizedCollection0);
      assertTrue(hashBag3.isEmpty());
      assertEquals(0, hashBag3.size());
      
      FluentIterable<Locale.LanguageRange> fluentIterable7 = FluentIterable.of((Iterable<Locale.LanguageRange>) synchronizedCollection0);
      assertNotNull(fluentIterable7);
      assertTrue(hashBag3.isEmpty());
      assertEquals(0, hashBag3.size());
      
      boolean boolean0 = fluentIterable4.contains(synchronizedCollection0);
      assertFalse(boolean0);
      assertEquals(3, hashBagArray0.length);
      assertTrue(hashBag3.isEmpty());
      assertEquals(0, hashBag3.size());
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer1).transform(any());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(transformerPredicate0, transformerPredicate0);
      assertNotNull(orPredicate0);
      
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<Locale.Category>) fluentIterable5, (Predicate<? super Locale.Category>) orPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(1213);
      assertNotNull(vector0);
      assertEquals(1213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(1213, 1213);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterable<Locale.Category> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>) vector0, (Iterable<? extends Locale.Category>) linkedHashSet0, (Iterable<? extends Locale.Category>) linkedHashSet0, (Iterable<? extends Locale.Category>) vector0);
      assertNotNull(iterable0);
      assertEquals(1213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Transformer<Locale.Category, String> transformer0 = (Transformer<Locale.Category, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString(iterable0, (Transformer<? super Locale.Category, String>) transformer0, "", "org.apache.commons.collections4.functors.NullIsFalsePredicate", "");
      assertNotNull(string0);
      assertEquals("org.apache.commons.collections4.functors.NullIsFalsePredicate", string0);
      assertEquals(1213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.emptyIterable();
      assertNotNull(iterable0);
      
      Iterable<Integer> iterable1 = null;
      Factory<TransformedBag<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends Integer>) null, factory0, (Predicate<? super Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicates must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      assertNotNull(hashBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      SynchronizedBag<InstanceofPredicate> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<InstanceofPredicate>) hashBag0);
      assertNotNull(synchronizedBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<InstanceofPredicate> predicate0 = AnyPredicate.anyPredicate((Predicate<? super InstanceofPredicate>[]) predicateArray0);
      assertNotNull(predicate0);
      assertEquals(0, predicateArray0.length);
      
      PredicatedBag<InstanceofPredicate> predicatedBag0 = PredicatedBag.predicatedBag((Bag<InstanceofPredicate>) synchronizedBag0, (Predicate<? super InstanceofPredicate>) predicate0);
      assertNotNull(predicatedBag0);
      assertEquals(0, predicateArray0.length);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = synchronizedBag0.add(instanceofPredicate0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(boolean0);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      
      Bag<InstanceofPredicate> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends InstanceofPredicate>) predicatedBag0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(predicatedBag0.contains(instanceofPredicate0));
      assertTrue(bag0.contains(instanceofPredicate0));
      assertNotNull(bag0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      assertEquals(1, bag0.size());
      
      Bag<InstanceofPredicate> bag1 = UnmodifiableBag.unmodifiableBag((Bag<? extends InstanceofPredicate>) bag0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(predicatedBag0.contains(instanceofPredicate0));
      assertTrue(bag0.contains(instanceofPredicate0));
      assertTrue(bag1.contains(instanceofPredicate0));
      assertNotNull(bag1);
      assertSame(bag0, bag1);
      assertSame(bag1, bag0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      assertEquals(1, bag0.size());
      assertEquals(1, bag1.size());
      
      int int0 = 0;
      InstanceofPredicate instanceofPredicate1 = IterableUtils.get((Iterable<InstanceofPredicate>) bag1, 0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(predicatedBag0.contains(instanceofPredicate0));
      assertTrue(bag0.contains(instanceofPredicate0));
      assertTrue(bag1.contains(instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      assertSame(bag0, bag1);
      assertSame(bag1, bag0);
      assertSame(instanceofPredicate1, instanceofPredicate0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      assertEquals(1, bag0.size());
      assertEquals(1, bag1.size());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      String string0 = IterableUtils.toString((Iterable<CollectionBag<TreeBag>>) synchronizedBag0, (Transformer<? super CollectionBag<TreeBag>, String>) transformer0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertNotNull(string0);
      assertEquals("[null]", string0);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.unmodifiableIterable((Iterable<InstanceofPredicate>) bag1);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(predicatedBag0.contains(instanceofPredicate0));
      assertTrue(bag0.contains(instanceofPredicate0));
      assertTrue(bag1.contains(instanceofPredicate0));
      assertNotNull(iterable0);
      assertSame(bag0, bag1);
      assertSame(bag1, bag0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      assertEquals(1, bag0.size());
      assertEquals(1, bag1.size());
      
      List<List<InstanceofPredicate>> list0 = IterableUtils.partition((Iterable<? extends InstanceofPredicate>) iterable0, (Predicate<? super InstanceofPredicate>) predicate0);
      assertTrue(hashBag0.contains(instanceofPredicate0));
      assertTrue(synchronizedBag0.contains(instanceofPredicate0));
      assertTrue(predicatedBag0.contains(instanceofPredicate0));
      assertTrue(bag0.contains(instanceofPredicate0));
      assertTrue(bag1.contains(instanceofPredicate0));
      assertNotNull(list0);
      assertSame(bag0, bag1);
      assertSame(bag1, bag0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashBag0.isEmpty());
      assertEquals(1, hashBag0.size());
      assertEquals(1, bag0.size());
      assertEquals(1, bag1.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      Stack<CollectionSortedBag<Object>> stack0 = new Stack<CollectionSortedBag<Object>>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      assertFalse(treeBag0.contains(0));
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      assertFalse(treeBag0.contains(0));
      assertFalse(collectionSortedBag0.contains(0));
      assertNotNull(collectionSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      // Undeclared exception!
      try { 
        stack0.set(1197, collectionSortedBag0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1197
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Collection<String>> linkedHashSet0 = new LinkedHashSet<Collection<String>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TreeSet<Collection<String>> treeSet0 = new TreeSet<Collection<String>>(linkedHashSet0);
      assertNotNull(treeSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      FluentIterable<Collection<String>> fluentIterable0 = FluentIterable.of((Iterable<Collection<String>>) treeSet0);
      assertNotNull(fluentIterable0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      FluentIterable<Collection<String>> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Collection<String>>) linkedHashSet0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Collection<String>> fluentIterable2 = fluentIterable1.collate((Iterable<? extends Collection<String>>) treeSet0, (Comparator<? super Collection<String>>) comparator0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        fluentIterable2.transform((Transformer<? super Collection<String>, ? extends Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      FluentIterable<String> fluentIterable0 = FluentIterable.of("org.apache.commons.collections4.bag.AbstractSortedBagDecorator");
      assertNotNull(fluentIterable0);
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.eval();
      assertNotNull(fluentIterable1);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.unique();
      assertNotNull(fluentIterable2);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      Iterable<String> iterable0 = IterableUtils.reversedIterable((Iterable<String>) fluentIterable2);
      assertNotNull(iterable0);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      Iterable<Object> iterable1 = IterableUtils.collatedIterable((Comparator<? super Object>) comparator0, (Iterable<?>) iterable0, (Iterable<?>) fluentIterable1);
      assertNotNull(iterable1);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<Locale.Category>) linkedList0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Vector<Object> vector0 = new Vector<Object>(0, 0);
      assertFalse(vector0.contains(0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((Object) "6h:zeOWe@kqj");
      assertTrue(vector0.contains("6h:zeOWe@kqj"));
      assertFalse(vector0.contains(0));
      assertTrue(boolean0);
      assertEquals("[6h:zeOWe@kqj]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      boolean boolean1 = IterableUtils.isEmpty(vector0);
      assertTrue(vector0.contains("6h:zeOWe@kqj"));
      assertFalse(vector0.contains(0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[6h:zeOWe@kqj]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      
      Class<Object> class0 = Object.class;
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Locale.LanguageRange[] locale_LanguageRangeArray0 = new Locale.LanguageRange[1];
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("!K%vexKA!", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=!k%vexka!
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Iterable<Locale.LanguageRange> iterable0 = null;
      Transformer<Locale.LanguageRange, String> transformer0 = (Transformer<Locale.LanguageRange, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<Locale.LanguageRange>) null, (Transformer<? super Locale.LanguageRange, String>) transformer0, "", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      assertNotNull(predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate3);
      assertNotNull(notPredicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicateArray0[2], defaultEquator0);
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(8, predicateArray0.length);
      
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      assertFalse(treeBag0.contains(""));
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      TreeBag<String> treeBag1 = new TreeBag<String>(treeBag0);
      assertFalse(treeBag0.contains(""));
      assertFalse(treeBag1.contains(""));
      assertNotNull(treeBag1);
      assertTrue(treeBag1.equals((Object)treeBag0));
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag1.isEmpty());
      assertEquals(0, treeBag1.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(treeBag1, comparator1, comparatorPredicate_Criterion0);
      assertFalse(treeBag0.contains(""));
      assertFalse(treeBag1.contains(""));
      assertNotNull(comparatorPredicate0);
      assertTrue(treeBag0.equals((Object)treeBag1));
      assertTrue(treeBag1.equals((Object)treeBag0));
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag1.isEmpty());
      assertEquals(0, treeBag1.size());
      
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      TreeBag<Predicate<Object>> treeBag2 = new TreeBag<Predicate<Object>>();
      assertNotNull(treeBag2);
      assertEquals(0, treeBag2.size());
      assertTrue(treeBag2.isEmpty());
      
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeBag2);
      assertNotNull(predicate4);
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertEquals(0, treeBag2.size());
      assertTrue(treeBag2.isEmpty());
      
      predicateArray0[5] = predicate4;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      // Undeclared exception!
      try { 
        treeBag2.add((Predicate<Object>) notPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.functors.NotPredicate cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(hashSet0);
      assertNotNull(vector0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.indexOf((Iterable<Locale.Category>) vector0, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.boundedIterable((Iterable<CollectionBag<SynchronizedBag>>) null, (-384L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<?>) null, (Iterable<?>) serviceLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<CollectionBag<String>> stack0 = new Stack<CollectionBag<String>>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<CollectionBag<String>>) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(0);
      assertFalse(hashSet0.contains(0));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<Integer> iterator0 = hashSet0.iterator();
      assertFalse(hashSet0.contains(0));
      assertNotNull(iterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = hashSet0.add(integer1);
      assertTrue(hashSet0.contains(integer0));
      assertTrue(boolean0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(integer0));
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      hashSet0.clear();
      assertFalse(hashSet0.contains(integer0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean2 = IterableUtils.isEmpty(hashSet0);
      assertFalse(hashSet0.contains(integer0));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashBag<CollectionSortedBag<Integer>> hashBag0 = new HashBag<CollectionSortedBag<Integer>>();
      assertNotNull(hashBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      CollectionSortedBag<Integer> collectionSortedBag0 = null;
      try {
        collectionSortedBag0 = new CollectionSortedBag<Integer>((SortedBag<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeSet<SynchronizedSortedBag<Locale.LanguageRange>> treeSet0 = new TreeSet<SynchronizedSortedBag<Locale.LanguageRange>>();
      assertNotNull(treeSet0);
      
      TreeSet<SynchronizedSortedBag<Locale.LanguageRange>> treeSet1 = new TreeSet<SynchronizedSortedBag<Locale.LanguageRange>>((SortedSet<SynchronizedSortedBag<Locale.LanguageRange>>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      closureUtilsTest_MockClosure0.execute(treeSet0);
      assertNotSame(treeSet0, treeSet1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      
      closureUtilsTest_MockClosure0.reset();
      IterableUtils.forEach((Iterable<SynchronizedSortedBag<Locale.LanguageRange>>) treeSet1, (Closure<? super SynchronizedSortedBag<Locale.LanguageRange>>) closureUtilsTest_MockClosure0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(93, 93);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ConstantFactory<LinkedHashSet<Locale.Category>> constantFactory0 = new ConstantFactory<LinkedHashSet<Locale.Category>>(linkedHashSet0);
      assertNotNull(constantFactory0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Predicate<Locale.Category>[] predicateArray0 = (Predicate<Locale.Category>[]) Array.newInstance(Predicate.class, 2);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Factory<Object> factory0 = ConstantFactory.constantFactory((Object) closureUtilsTest_MockClosure0);
      assertNotNull(factory0);
      
      TransformerPredicate<Locale.Category> transformerPredicate0 = new TransformerPredicate<Locale.Category>(transformer0);
      assertNotNull(transformerPredicate0);
      
      predicateArray0[0] = (Predicate<Locale.Category>) transformerPredicate0;
      PriorityQueue<Predicate<Locale.Category>> priorityQueue0 = new PriorityQueue<Predicate<Locale.Category>>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add(predicateArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, predicateArray0.length);
      assertEquals(1, priorityQueue0.size());
      
      Predicate<Locale.Category> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.Category>>) priorityQueue0);
      assertFalse(priorityQueue0.contains(predicate0));
      assertNotNull(predicate0);
      assertEquals(1, priorityQueue0.size());
      
      predicateArray0[1] = predicate0;
      List<LinkedHashSet<Locale.Category>> list0 = IterableUtils.partition((Iterable<? extends Locale.Category>) linkedHashSet0, (Factory<LinkedHashSet<Locale.Category>>) constantFactory0, (Predicate<? super Locale.Category>[]) predicateArray0);
      assertTrue(list0.contains(linkedHashSet0));
      assertNotNull(list0);
      assertEquals(2, predicateArray0.length);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterable<Locale.Category> iterable0 = IterableUtils.reversedIterable((Iterable<Locale.Category>) linkedHashSet0);
      assertNotNull(iterable0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterable<Locale.Category> iterable1 = IterableUtils.emptyIterable();
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 8);
      FluentIterable<String> fluentIterable0 = FluentIterable.of("VUsE}");
      assertNotNull(fluentIterable0);
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate1 = new TransformerPredicate<Object>(transformer1);
      assertNotNull(transformerPredicate1);
      
      predicateArray1[0] = (Predicate<Object>) transformerPredicate1;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate1);
      
      predicateArray1[1] = predicate1;
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer2, predicate1);
      assertNotNull(transformedPredicate0);
      
      predicateArray1[2] = (Predicate<Object>) transformedPredicate0;
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray1[3] = predicate2;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=93.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 5;
      HashSet<PredicatedSortedBag<InstanceofPredicate>> hashSet0 = new HashSet<PredicatedSortedBag<InstanceofPredicate>>(5);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LinkedHashSet<PredicatedSortedBag<InstanceofPredicate>> linkedHashSet0 = new LinkedHashSet<PredicatedSortedBag<InstanceofPredicate>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Factory<LinkedHashSet<PredicatedSortedBag<InstanceofPredicate>>> factory0 = ConstantFactory.constantFactory(linkedHashSet0);
      assertNotNull(factory0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = null;
      boolean boolean0 = hashSet0.add((PredicatedSortedBag<InstanceofPredicate>) null);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add((PredicatedSortedBag<InstanceofPredicate>) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      List<LinkedHashSet<PredicatedSortedBag<InstanceofPredicate>>> list0 = IterableUtils.partition((Iterable<? extends PredicatedSortedBag<InstanceofPredicate>>) hashSet0, factory0, (Predicate<? super PredicatedSortedBag<InstanceofPredicate>>[]) predicateArray0);
      assertTrue(list0.contains(linkedHashSet0));
      assertNotNull(list0);
      assertEquals(0, predicateArray0.length);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Iterable<Object> iterable0 = IterableUtils.emptyIterable();
      assertNotNull(iterable0);
      
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>(5, 5);
      assertNotNull(vector0);
      assertEquals(5, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertEquals(5, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Iterable<Predicate<Object>> iterable1 = IterableUtils.reversedIterable((Iterable<Predicate<Object>>) vector0);
      assertNotNull(iterable1);
      assertEquals(5, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        IterableUtils.get(iterable0, 3881);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3881
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      assertNotNull(predicate0);
      
      int int0 = treeSet0.size();
      assertEquals(0, int0);
      
      NullIsExceptionPredicate<String> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<String>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      
      boolean boolean0 = IterableUtils.matchesAll((Iterable<String>) treeSet0, (Predicate<? super String>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
      
      int int1 = IterableUtils.size(treeSet0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Iterable<TransformedBag<SynchronizedSortedBag>> iterable0 = IterableUtils.boundedIterable((Iterable<TransformedBag<SynchronizedSortedBag>>) treeSet0, (long) 0);
      assertNotNull(iterable0);
      
      FluentIterable<Locale.Category> fluentIterable0 = new FluentIterable<Locale.Category>();
      assertNotNull(fluentIterable0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      // Undeclared exception!
      try { 
        fluentIterable0.copyInto(arrayDeque0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.reversedIterable((Iterable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 5);
      iterableArray0[0] = (Iterable<String>) treeBag0;
      iterableArray0[1] = (Iterable<String>) treeBag0;
      iterableArray0[2] = (Iterable<String>) treeBag0;
      iterableArray0[3] = (Iterable<String>) treeBag0;
      iterableArray0[4] = (Iterable<String>) treeBag0;
      Iterable<String> iterable0 = IterableUtils.zippingIterable((Iterable<? extends String>) treeBag0, (Iterable<? extends String>[]) iterableArray0);
      assertNotNull(iterable0);
      assertEquals(5, iterableArray0.length);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      FluentIterable<String> fluentIterable0 = FluentIterable.of(iterable0);
      assertNotNull(fluentIterable0);
      assertEquals(5, iterableArray0.length);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      SynchronizedSortedBag<String> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<String>) treeBag0);
      assertNotNull(synchronizedSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      String string0 = "$W<_]@-sDoKgaok$2";
      int int0 = IterableUtils.frequency((Iterable<String>) synchronizedSortedBag0, "$W<_]@-sDoKgaok$2");
      assertFalse(treeBag0.contains(string0));
      assertFalse(synchronizedSortedBag0.contains(string0));
      assertEquals(0, int0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Iterable<PredicatedBag<TransformedBag>> iterable0 = IterableUtils.emptyIterable();
      assertNotNull(iterable0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      boolean boolean0 = treeBag0.add("He");
      assertTrue(treeBag0.contains("He"));
      assertTrue(boolean0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      assertNotNull(transformerPredicate0);
      
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate3);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertEquals(4, predicateArray0.length);
      
      boolean boolean1 = treeBag0.add("$W<_]@-sDoKgaok$2");
      assertTrue(treeBag0.contains("He"));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(2, treeBag0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<CollectionSortedBag<SynchronizedSortedBag>>) treeBag0, (Predicate<? super CollectionSortedBag<SynchronizedSortedBag>>) predicate3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Locale.Category> priorityQueue1 = new PriorityQueue<Locale.Category>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = priorityQueue1.add(locale_Category0);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertTrue(boolean0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      
      Iterable<Locale.Category> iterable0 = IterableUtils.uniqueIterable((Iterable<Locale.Category>) priorityQueue1);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotNull(iterable0);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      assertNotNull(andPredicate0);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean1 = priorityQueue1.add(locale_Category1);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(andPredicate0);
      assertNotNull(nullIsFalsePredicate0);
      
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue1.forEach(consumer0);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      
      Predicate<Integer> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Integer>) nullIsFalsePredicate0);
      assertNotNull(predicate1);
      
      int int0 = IterableUtils.indexOf((Iterable<CollectionSortedBag<SynchronizedBag>>) iterable0, (Predicate<? super CollectionSortedBag<SynchronizedBag>>) nullIsFalsePredicate0);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(0, int0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      
      boolean boolean2 = IterableUtils.contains((Iterable<HashBag<HashBag>>) priorityQueue0, (Object) iterable0);
      assertFalse(priorityQueue0.contains(locale_Category0));
      assertTrue(priorityQueue1.contains(locale_Category0));
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(boolean2);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(int0));
      assertNotNull(treeSet0);
      
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(treeSet0);
      assertFalse(treeBag0.contains(int0));
      assertFalse(treeSet0.contains(int0));
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Integer integer0 = new Integer((-163));
      assertNotNull(integer0);
      assertEquals((-163), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean3 = treeBag0.add(integer0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertFalse(treeSet0.contains(int0));
      assertTrue(boolean3);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      
      SortedBag<Integer> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Integer>) treeBag0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertTrue(sortedBag0.contains(integer0));
      assertFalse(sortedBag0.contains(int0));
      assertFalse(treeSet0.contains(int0));
      assertNotNull(sortedBag0);
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, sortedBag0.size());
      
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertTrue(sortedBag0.contains(integer0));
      assertFalse(sortedBag0.contains(int0));
      assertFalse(collectionSortedBag0.contains(int0));
      assertTrue(collectionSortedBag0.contains(integer0));
      assertFalse(treeSet0.contains(int0));
      assertNotNull(collectionSortedBag0);
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, sortedBag0.size());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      boolean boolean4 = treeSet0.add(integer1);
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(int0));
      assertTrue(boolean4);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      Bag<Integer> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Integer>) collectionSortedBag0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertTrue(sortedBag0.contains(integer0));
      assertFalse(sortedBag0.contains(int0));
      assertFalse(collectionSortedBag0.contains(int0));
      assertTrue(collectionSortedBag0.contains(integer0));
      assertTrue(bag0.contains(integer0));
      assertFalse(bag0.contains(int0));
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(int0));
      assertNotNull(bag0);
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, sortedBag0.size());
      assertEquals(1, bag0.size());
      
      Iterable<Integer> iterable1 = IterableUtils.loopingIterable((Iterable<Integer>) bag0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertTrue(sortedBag0.contains(integer0));
      assertFalse(sortedBag0.contains(int0));
      assertFalse(collectionSortedBag0.contains(int0));
      assertTrue(collectionSortedBag0.contains(integer0));
      assertTrue(bag0.contains(integer0));
      assertFalse(bag0.contains(int0));
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(int0));
      assertNotNull(iterable1);
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, sortedBag0.size());
      assertEquals(1, bag0.size());
      
      Iterable<Integer> iterable2 = IterableUtils.chainedIterable((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) bag0);
      assertTrue(treeBag0.contains(integer0));
      assertFalse(treeBag0.contains(int0));
      assertTrue(sortedBag0.contains(integer0));
      assertFalse(sortedBag0.contains(int0));
      assertFalse(collectionSortedBag0.contains(int0));
      assertTrue(collectionSortedBag0.contains(integer0));
      assertTrue(bag0.contains(integer0));
      assertFalse(bag0.contains(int0));
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(int0));
      assertNotNull(iterable2);
      assertFalse(iterable2.equals((Object)iterable1));
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, sortedBag0.size());
      assertEquals(1, bag0.size());
      
      Iterable<SynchronizedBag<CollectionSortedBag>> iterable3 = IterableUtils.emptyIterable();
      assertNotNull(iterable3);
      
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<ArrayList<Object>>) null, (Transformer<? super ArrayList<Object>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashBag<Predicate<Object>> hashBag0 = new HashBag<Predicate<Object>>();
      assertNotNull(hashBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = hashBag0.add(predicate0);
      assertTrue(hashBag0.contains(predicate0));
      assertTrue(boolean0);
      assertEquals(1, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
      
      String string0 = hashBag0.toString();
      assertTrue(hashBag0.contains(predicate0));
      assertNotNull(string0);
      assertEquals(1, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
      
      Predicate<Integer> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Integer>>) hashBag0);
      assertTrue(hashBag0.contains(predicate0));
      assertNotNull(predicate1);
      assertEquals(1, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
      
      boolean boolean1 = hashBag0.add(predicate0);
      assertTrue(hashBag0.contains(predicate0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
      
      Integer integer0 = new Integer(1372);
      assertNotNull(integer0);
      assertEquals(1372, (int)integer0);
      
      boolean boolean2 = arrayList0.add(integer0);
      assertTrue(arrayList0.contains(1372));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Iterable<Integer> iterable0 = IterableUtils.filteredIterable((Iterable<Integer>) arrayList0, (Predicate<? super Integer>) predicate1);
      assertTrue(arrayList0.contains(1372));
      assertTrue(hashBag0.contains(predicate0));
      assertNotNull(iterable0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
      
      // Undeclared exception!
      try { 
        IterableUtils.toList((Iterable<TransformedBag<SynchronizedBag>>) iterable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transformer<Object, Locale.Category> transformer0 = (Transformer<Object, Locale.Category>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IterableUtils.transformedIterable((Iterable<TransformedBag<Locale.Category>>) null, (Transformer<? super TransformedBag<Locale.Category>, ? extends Locale.Category>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String>[] arrayListArray0 = (ArrayList<String>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      arrayListArray0[0] = arrayList0;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      arrayListArray0[1] = arrayList1;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      arrayListArray0[2] = arrayList2;
      ArrayList<String> arrayList3 = new ArrayList<String>();
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      arrayListArray0[3] = arrayList3;
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertNotNull(arrayList4);
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList0));
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      
      arrayListArray0[4] = arrayList4;
      ArrayList<String> arrayList5 = new ArrayList<String>();
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      
      arrayListArray0[5] = arrayList5;
      ArrayList<String> arrayList6 = new ArrayList<String>();
      assertNotNull(arrayList6);
      assertTrue(arrayList6.equals((Object)arrayList1));
      assertTrue(arrayList6.equals((Object)arrayList2));
      assertTrue(arrayList6.equals((Object)arrayList3));
      assertTrue(arrayList6.equals((Object)arrayList0));
      assertTrue(arrayList6.equals((Object)arrayList5));
      assertTrue(arrayList6.equals((Object)arrayList4));
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      
      arrayListArray0[6] = arrayList6;
      ArrayList<String> arrayList7 = new ArrayList<String>();
      assertNotNull(arrayList7);
      assertTrue(arrayList7.equals((Object)arrayList4));
      assertTrue(arrayList7.equals((Object)arrayList2));
      assertTrue(arrayList7.equals((Object)arrayList0));
      assertTrue(arrayList7.equals((Object)arrayList5));
      assertTrue(arrayList7.equals((Object)arrayList1));
      assertTrue(arrayList7.equals((Object)arrayList6));
      assertTrue(arrayList7.equals((Object)arrayList3));
      assertTrue(arrayList7.isEmpty());
      assertEquals(0, arrayList7.size());
      
      arrayListArray0[7] = arrayList7;
      ArrayList<String> arrayList8 = new ArrayList<String>();
      assertNotNull(arrayList8);
      assertTrue(arrayList8.equals((Object)arrayList4));
      assertTrue(arrayList8.equals((Object)arrayList3));
      assertTrue(arrayList8.equals((Object)arrayList2));
      assertTrue(arrayList8.equals((Object)arrayList6));
      assertTrue(arrayList8.equals((Object)arrayList7));
      assertTrue(arrayList8.equals((Object)arrayList5));
      assertTrue(arrayList8.equals((Object)arrayList0));
      assertTrue(arrayList8.equals((Object)arrayList1));
      assertEquals(0, arrayList8.size());
      assertTrue(arrayList8.isEmpty());
      
      arrayListArray0[8] = arrayList8;
      FluentIterable<ArrayList<String>> fluentIterable0 = FluentIterable.of(arrayListArray0);
      assertNotNull(fluentIterable0);
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable2 = fluentIterable1.eval();
      assertNotNull(fluentIterable2);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable3 = fluentIterable2.skip(1295L);
      assertNotNull(fluentIterable3);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(9, arrayListArray0.length);
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<ArrayList<String>>) fluentIterable3, (Transformer<? super ArrayList<String>, String>) transformer0, "on;Zk8I!&C`|9", "", "on;Zk8I!&C`|9");
      assertNotNull(string0);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertEquals("on;Zk8I!&C`|9", string0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(9, arrayListArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IterableUtils iterableUtils0 = new IterableUtils();
      assertNotNull(iterableUtils0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Comparator<? super String>) null);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterable<String> iterable0 = IterableUtils.loopingIterable((Iterable<String>) priorityQueue0);
      assertNotNull(iterable0);
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable0 = FluentIterable.of(iterable0);
      assertNotNull(fluentIterable0);
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.append((Iterable<? extends String>) priorityQueue0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(0, priorityQueue0.size());
      
      ClosureUtilsTest.MockTransformer<String> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<String>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.transform((Transformer<? super String, ? extends String>) closureUtilsTest_MockTransformer0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable3 = fluentIterable2.reverse();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable4 = fluentIterable2.eval();
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable5 = fluentIterable4.unique();
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertEquals(0, priorityQueue0.size());
      
      FluentIterable<String> fluentIterable6 = fluentIterable5.unique();
      assertNotNull(fluentIterable6);
      assertNotSame(fluentIterable5, fluentIterable6);
      assertNotSame(fluentIterable6, fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable6.equals((Object)fluentIterable2));
      assertFalse(fluentIterable6.equals((Object)fluentIterable0));
      assertFalse(fluentIterable6.equals((Object)fluentIterable4));
      assertFalse(fluentIterable6.equals((Object)fluentIterable1));
      assertFalse(fluentIterable6.equals((Object)fluentIterable5));
      assertFalse(fluentIterable6.equals((Object)fluentIterable3));
      assertEquals(0, priorityQueue0.size());
      
      Iterable<String> iterable1 = IterableUtils.collatedIterable((Iterable<? extends String>) fluentIterable5, (Iterable<? extends String>) fluentIterable2);
      assertNotNull(iterable1);
      assertNotSame(fluentIterable5, fluentIterable6);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable6));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable6));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(0, priorityQueue0.size());
      
      ArrayDeque<CollectionSortedBag<Integer>> arrayDeque0 = new ArrayDeque<CollectionSortedBag<Integer>>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Iterable<Object> iterable2 = IterableUtils.transformedIterable((Iterable<CollectionSortedBag<Integer>>) arrayDeque0, (Transformer<? super CollectionSortedBag<Integer>, ?>) transformer0);
      assertNotNull(iterable2);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      fluentIterable3.forEach((Closure<? super String>) closureUtilsTest_MockClosure0);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable6));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(0, priorityQueue0.size());
      
      CollectionBag<SynchronizedBag> collectionBag0 = IterableUtils.forEachButLast((Iterable<CollectionBag<SynchronizedBag>>) fluentIterable1, (Closure<? super CollectionBag<SynchronizedBag>>) closureUtilsTest_MockClosure0);
      assertNull(collectionBag0);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertEquals(0, priorityQueue0.size());
      
      Iterable<UnmodifiableSortedBag<PredicatedSortedBag>> iterable3 = IterableUtils.reversedIterable((Iterable<UnmodifiableSortedBag<PredicatedSortedBag>>) fluentIterable3);
      assertNotNull(iterable3);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable6));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(0, priorityQueue0.size());
      
      ClosureUtilsTest.MockTransformer<Object> closureUtilsTest_MockTransformer1 = new ClosureUtilsTest.MockTransformer<Object>();
      assertNotNull(closureUtilsTest_MockTransformer1);
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(closureUtilsTest_MockTransformer1, predicate1);
      assertNotNull(transformedPredicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) transformedPredicate0, (Predicate<? super Object>) predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      long long0 = IterableUtils.countMatches((Iterable<SynchronizedBag<CollectionBag>>) arrayDeque0, (Predicate<? super SynchronizedBag<CollectionBag>>) predicate2);
      assertEquals(0L, long0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      int int0 = IterableUtils.size(iterable3);
      assertEquals(0, int0);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable6));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable6));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<String>) fluentIterable6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 0);
      IterableUtils.checkNotNull(iterableArray0);
      assertEquals(0, iterableArray0.length);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) arrayDeque0, (Predicate<? super Object>) predicate0);
      assertNotNull(predicatedCollection0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean0 = IterableUtils.contains((Iterable<Object>) predicatedCollection0, (Object) predicate0);
      assertFalse(boolean0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = arrayList0.add(integer0);
      assertTrue(arrayList0.contains(integer0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      arrayDeque0.addFirst(arrayList0);
      assertFalse(arrayDeque0.contains(0));
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.matchesAny((Iterable<UnmodifiableSortedBag<TreeBag>>) predicatedCollection0, (Predicate<? super UnmodifiableSortedBag<TreeBag>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<String>[] arrayListArray0 = (ArrayList<String>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      arrayListArray0[0] = arrayList0;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      arrayListArray0[1] = arrayList1;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      assertNotNull(arrayList2);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      arrayListArray0[2] = arrayList2;
      ArrayList<String> arrayList3 = new ArrayList<String>();
      assertNotNull(arrayList3);
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList3.equals((Object)arrayList2));
      assertTrue(arrayList3.equals((Object)arrayList0));
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      arrayListArray0[3] = arrayList3;
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertNotNull(arrayList4);
      assertTrue(arrayList4.equals((Object)arrayList0));
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertTrue(arrayList4.equals((Object)arrayList2));
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      
      arrayListArray0[4] = arrayList4;
      ArrayList<String> arrayList5 = new ArrayList<String>();
      assertNotNull(arrayList5);
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(arrayList5.equals((Object)arrayList3));
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      
      arrayListArray0[5] = arrayList5;
      ArrayList<String> arrayList6 = new ArrayList<String>();
      assertNotNull(arrayList6);
      assertTrue(arrayList6.equals((Object)arrayList0));
      assertTrue(arrayList6.equals((Object)arrayList3));
      assertTrue(arrayList6.equals((Object)arrayList5));
      assertTrue(arrayList6.equals((Object)arrayList2));
      assertTrue(arrayList6.equals((Object)arrayList1));
      assertTrue(arrayList6.equals((Object)arrayList4));
      assertTrue(arrayList6.isEmpty());
      assertEquals(0, arrayList6.size());
      
      arrayListArray0[6] = arrayList6;
      ArrayList<String> arrayList7 = new ArrayList<String>();
      assertNotNull(arrayList7);
      assertTrue(arrayList7.equals((Object)arrayList3));
      assertTrue(arrayList7.equals((Object)arrayList5));
      assertTrue(arrayList7.equals((Object)arrayList0));
      assertTrue(arrayList7.equals((Object)arrayList1));
      assertTrue(arrayList7.equals((Object)arrayList2));
      assertTrue(arrayList7.equals((Object)arrayList6));
      assertTrue(arrayList7.equals((Object)arrayList4));
      assertEquals(0, arrayList7.size());
      assertTrue(arrayList7.isEmpty());
      
      ArrayList<String> arrayList8 = new ArrayList<String>();
      assertNotNull(arrayList8);
      assertTrue(arrayList8.equals((Object)arrayList0));
      assertTrue(arrayList8.equals((Object)arrayList7));
      assertTrue(arrayList8.equals((Object)arrayList3));
      assertTrue(arrayList8.equals((Object)arrayList4));
      assertTrue(arrayList8.equals((Object)arrayList6));
      assertTrue(arrayList8.equals((Object)arrayList5));
      assertTrue(arrayList8.equals((Object)arrayList1));
      assertTrue(arrayList8.equals((Object)arrayList2));
      assertTrue(arrayList8.isEmpty());
      assertEquals(0, arrayList8.size());
      
      arrayListArray0[8] = arrayList8;
      FluentIterable<ArrayList<String>> fluentIterable0 = FluentIterable.of(arrayListArray0);
      assertNotNull(fluentIterable0);
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable2 = fluentIterable1.eval();
      assertNotNull(fluentIterable2);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertEquals(9, arrayListArray0.length);
      
      FluentIterable<ArrayList<String>> fluentIterable3 = fluentIterable2.skip(1295L);
      assertNotNull(fluentIterable3);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertEquals(9, arrayListArray0.length);
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<ArrayList<String>>) fluentIterable3, (Transformer<? super ArrayList<String>, String>) transformer0, "on;Zk8I!&C`|9", "", "on;Zk8I!&C`|9");
      assertNotNull(string0);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertEquals("on;Zk8I!&C`|9", string0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertEquals(9, arrayListArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(2108);
      assertNotNull(integer0);
      assertEquals(2108, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2108);
      assertNotNull(integer1);
      assertEquals(2108, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      assertNotNull(fluentIterable0);
      assertEquals(3, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.unique();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(3, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.zip((Iterable<? extends Integer>) fluentIterable0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertEquals(3, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.skip(0);
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertEquals(3, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.loop();
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertEquals(3, integerArray0.length);
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      assertNotNull(notPredicate0);
      
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<SynchronizedBag<PredicatedBag>>) fluentIterable4, (Predicate<? super SynchronizedBag<PredicatedBag>>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = priorityQueue0.add(locale_Category0);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = priorityQueue0.add(locale_Category1);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(boolean1);
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add(locale_Category0);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertTrue(boolean2);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, priorityQueue0.size());
      
      boolean boolean3 = priorityQueue0.add(locale_Category0);
      assertTrue(priorityQueue0.contains(locale_Category0));
      assertNotSame(locale_Category0, locale_Category1);
      assertTrue(boolean3);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(4, priorityQueue0.size());
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean4 = priorityQueue0.add(locale_Category2);
      assertTrue(priorityQueue0.contains(locale_Category2));
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertTrue(boolean4);
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(5, priorityQueue0.size());
      
      boolean boolean5 = priorityQueue0.add(locale_Category2);
      assertTrue(priorityQueue0.contains(locale_Category2));
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertTrue(boolean5);
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertEquals(6, priorityQueue0.size());
      
      Iterable<Locale.Category> iterable0 = IterableUtils.emptyIfNull((Iterable<Locale.Category>) priorityQueue0);
      assertTrue(priorityQueue0.contains(locale_Category2));
      assertTrue(iterable0.contains(locale_Category2));
      assertNotNull(iterable0);
      assertEquals(6, priorityQueue0.size());
      
      Iterable<Locale.LanguageRange> iterable1 = null;
      List<Locale.LanguageRange> list0 = IterableUtils.toList((Iterable<Locale.LanguageRange>) null);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      IterableUtils iterableUtils0 = new IterableUtils();
      assertNotNull(iterableUtils0);
      
      // Undeclared exception!
      try { 
        IterableUtils.filteredIterable((Iterable<Predicate<CollectionSortedBag>>) iterable0, (Predicate<? super Predicate<CollectionSortedBag>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of((Integer) null);
      assertNotNull(fluentIterable0);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.unmodifiable();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Integer> fluentIterable2 = fluentIterable0.append((Iterable<? extends Integer>) fluentIterable1);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Integer> fluentIterable3 = fluentIterable1.loop();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.collate((Iterable<? extends Integer>) fluentIterable1);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      
      boolean boolean0 = fluentIterable4.isEmpty();
      assertFalse(boolean0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      
      FluentIterable<Integer> fluentIterable5 = fluentIterable4.append((Iterable<? extends Integer>) fluentIterable1);
      assertNotNull(fluentIterable5);
      assertNotSame(fluentIterable5, fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      
      // Undeclared exception!
      IterableUtils.size(fluentIterable5);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      List<Locale.LanguageRange> list0 = IterableUtils.toList((Iterable<Locale.LanguageRange>) null);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<CollectionBag<CollectionSortedBag>>) null, (Transformer<? super CollectionBag<CollectionSortedBag>, String>) transformer0, "", "Hello", "Hello");
      assertNotNull(string0);
      assertEquals("HelloHello", string0);
      
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FluentIterable<Locale.LanguageRange> fluentIterable0 = new FluentIterable<Locale.LanguageRange>();
      assertNotNull(fluentIterable0);
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        fluentIterable0.filter((Predicate<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IterableUtils iterableUtils0 = new IterableUtils();
      assertNotNull(iterableUtils0);
      
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IterableUtils.matchesAny((Iterable<String>) null, (Predicate<? super String>) predicate0);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.removeFirstOccurrence("r&x]utU5");
      assertFalse(linkedList0.contains("r&x]utU5"));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformedCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      assertFalse(linkedList0.contains("r&x]utU5"));
      assertFalse(transformedCollection0.contains("r&x]utU5"));
      assertNotNull(transformedCollection0);
      assertEquals(0, linkedList0.size());
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      IterableUtils.forEach((Iterable<SynchronizedSortedBag<SynchronizedSortedBag>>) transformedCollection0, (Closure<? super SynchronizedSortedBag<SynchronizedSortedBag>>) closureUtilsTest_MockClosure0);
      assertFalse(linkedList0.contains("r&x]utU5"));
      assertFalse(transformedCollection0.contains("r&x]utU5"));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(4, 4);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("Z<;PLbJ\"3U)T5i<");
      assertTrue(linkedHashSet0.contains("Z<;PLbJ\"3U)T5i<"));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterable<String> iterable0 = IterableUtils.loopingIterable((Iterable<String>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains("Z<;PLbJ\"3U)T5i<"));
      assertNotNull(iterable0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      closureUtilsTest_MockClosure0.reset();
      closureUtilsTest_MockClosure0.count = 4;
      // Undeclared exception!
      IterableUtils.forEachButLast((Iterable<HashBag<TreeBag>>) iterable0, (Closure<? super HashBag<TreeBag>>) closureUtilsTest_MockClosure0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends Locale.Category>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      String string0 = "org.apache.commons.collections4.bag.SynchronizedBag";
      boolean boolean0 = treeBag0.add("org.apache.commons.collections4.bag.SynchronizedBag");
      assertTrue(treeBag0.contains(string0));
      assertTrue(boolean0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>(treeBag0);
      assertTrue(treeBag0.contains(string0));
      assertTrue(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      assertEquals(1, linkedList0.size());
      
      String string1 = "+B{9\"HjnAV";
      boolean boolean1 = linkedList0.add("+B{9\"HjnAV");
      assertFalse(treeBag0.contains("+B{9\"HjnAV"));
      assertTrue(treeBag0.contains("org.apache.commons.collections4.bag.SynchronizedBag"));
      assertTrue(linkedList0.contains("org.apache.commons.collections4.bag.SynchronizedBag"));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      assertEquals(2, linkedList0.size());
      
      List<String> list0 = IterableUtils.toList((Iterable<String>) linkedList0);
      assertFalse(treeBag0.contains("+B{9\"HjnAV"));
      assertTrue(treeBag0.contains("org.apache.commons.collections4.bag.SynchronizedBag"));
      assertTrue(linkedList0.contains("org.apache.commons.collections4.bag.SynchronizedBag"));
      assertTrue(list0.contains("org.apache.commons.collections4.bag.SynchronizedBag"));
      assertNotNull(list0);
      assertFalse(treeBag0.isEmpty());
      assertEquals(1, treeBag0.size());
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<SynchronizedSortedBag<TransformedBag>>) linkedList0, (Predicate<? super SynchronizedSortedBag<TransformedBag>>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      FluentIterable<Object> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Object> fluentIterable2 = fluentIterable1.eval();
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Object> fluentIterable3 = fluentIterable2.loop();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      int int0 = IterableUtils.size(fluentIterable3);
      assertEquals(0, int0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(instanceofPredicate0);
      assertNotNull(notPredicate0);
      
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[2] = predicate0;
      NotPredicate<Object> notPredicate1 = new NotPredicate<Object>(predicateArray0[1]);
      assertNotNull(notPredicate1);
      assertFalse(notPredicate1.equals((Object)notPredicate0));
      assertEquals(4, predicateArray0.length);
      
      predicateArray0[3] = (Predicate<Object>) notPredicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertNotNull(onePredicate0);
      assertEquals(4, predicateArray0.length);
      
      OrPredicate<Locale.LanguageRange> orPredicate0 = new OrPredicate<Locale.LanguageRange>(onePredicate0, notPredicate1);
      assertNotNull(orPredicate0);
      assertFalse(notPredicate1.equals((Object)notPredicate0));
      assertEquals(4, predicateArray0.length);
      
      // Undeclared exception!
      try { 
        IterableUtils.filteredIterable((Iterable<Locale.LanguageRange>) null, (Predicate<? super Locale.LanguageRange>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<UnmodifiableBag<String>> treeBag0 = new TreeBag<UnmodifiableBag<String>>(comparator0);
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      CollectionBag<UnmodifiableBag<String>> collectionBag0 = new CollectionBag<UnmodifiableBag<String>>(treeBag0);
      assertNotNull(collectionBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      HashBag<UnmodifiableBag<String>> hashBag0 = new HashBag<UnmodifiableBag<String>>(collectionBag0);
      assertNotNull(hashBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<UnmodifiableBag<String>>) hashBag0, (Transformer<? super UnmodifiableBag<String>, String>) transformer0, "", "", "Iterables must not be null.");
      assertNotNull(string0);
      assertEquals("Iterables must not be null.", string0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string1 = IterableUtils.toString((Iterable<SynchronizedSortedBag<SynchronizedBag>>) hashBag0, (Transformer<? super SynchronizedSortedBag<SynchronizedBag>, String>) transformer1);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, hashBag0.size());
      assertTrue(hashBag0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string1));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashBag<String> hashBag1 = new HashBag<String>(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertFalse(hashBag1.contains(string1));
      assertNotNull(hashBag1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashBag1.isEmpty());
      assertEquals(0, hashBag1.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>(hashBag1);
      assertFalse(arrayList0.contains(string1));
      assertFalse(hashBag1.contains(string1));
      assertFalse(linkedList0.contains(string1));
      assertNotNull(linkedList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashBag1.isEmpty());
      assertEquals(0, hashBag1.size());
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, Collection<String>> transformer2 = (Transformer<Object, Collection<String>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Iterable<Collection<String>> iterable0 = IterableUtils.transformedIterable((Iterable<String>) linkedList0, (Transformer<? super String, ? extends Collection<String>>) transformer2);
      assertFalse(arrayList0.contains(string1));
      assertFalse(hashBag1.contains(string1));
      assertFalse(linkedList0.contains(string1));
      assertNotNull(iterable0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(hashBag1.isEmpty());
      assertEquals(0, hashBag1.size());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Iterable<Predicate<Object>> iterable0 = null;
      Iterable<Predicate<Object>> iterable1 = IterableUtils.emptyIfNull((Iterable<Predicate<Object>>) null);
      assertNotNull(iterable1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      arrayDeque0.push(iterable1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      ArrayDeque<Object> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      
      boolean boolean0 = arrayDeque0.removeLastOccurrence((Object) null);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(boolean0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayList0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      predicateArray0[1] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 4 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      int int0 = 741;
      Integer integer0 = new Integer(741);
      assertNotNull(integer0);
      assertEquals(741, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = treeSet0.add(integer0);
      assertTrue(treeSet0.contains(int0));
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(741);
      assertNotNull(integer1);
      assertEquals(741, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      NavigableSet<Integer> navigableSet0 = treeSet0.headSet(integer1, false);
      assertTrue(treeSet0.contains(int0));
      assertFalse(navigableSet0.contains(int0));
      assertNotNull(navigableSet0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      Integer integer2 = IterableUtils.first((Iterable<Integer>) treeSet0);
      assertTrue(treeSet0.contains(741));
      assertNotNull(integer2);
      assertEquals(741, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.countMatches((Iterable<TreeBag<SynchronizedSortedBag>>) navigableSet0, (Predicate<? super TreeBag<SynchronizedSortedBag>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Locale.Category> treeBag0 = new TreeBag<Locale.Category>(comparator0);
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      SortedBag<Locale.Category> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Locale.Category>) treeBag0);
      assertNotNull(sortedBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, (Predicate<? super Object>) null);
      assertNotNull(andPredicate0);
      
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) andPredicate0, (Predicate<? super Object>) transformerPredicate0);
      assertNotNull(predicate0);
      
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<LinkedList<String>> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super LinkedList<String>, Boolean>) transformer1);
      assertNotNull(predicate1);
      
      Iterable<Locale.Category> iterable0 = IterableUtils.filteredIterable((Iterable<Locale.Category>) sortedBag0, (Predicate<? super Locale.Category>) predicate0);
      assertNotNull(iterable0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      Iterable<Locale.Category> iterable1 = IterableUtils.reversedIterable(iterable0);
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      Iterable<Object> iterable2 = IterableUtils.emptyIterable();
      assertNotNull(iterable2);
      
      Iterable<Object> iterable3 = IterableUtils.filteredIterable(iterable2, (Predicate<? super Object>) andPredicate0);
      assertNotNull(iterable3);
      assertFalse(iterable3.equals((Object)iterable2));
      
      LinkedHashSet<SynchronizedBag<Locale.LanguageRange>> linkedHashSet0 = new LinkedHashSet<SynchronizedBag<Locale.LanguageRange>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.find((Iterable<SynchronizedBag<Locale.LanguageRange>>) linkedHashSet0, (Predicate<? super SynchronizedBag<Locale.LanguageRange>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      Iterable<Integer> iterable1 = IterableUtils.emptyIfNull((Iterable<Integer>) null);
      assertNotNull(iterable1);
      
      HashSet<Locale.Category> hashSet0 = null;
      try {
        hashSet0 = new HashSet<Locale.Category>((-1805));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1805
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      
      Iterable<Locale.Category> iterable0 = IterableUtils.collatedIterable((Comparator<? super Locale.Category>) null, (Iterable<? extends Locale.Category>) serviceLoader0, (Iterable<? extends Locale.Category>) serviceLoader0);
      assertNotNull(iterable0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      
      Iterable<Locale.Category> iterable1 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>) iterable0, (Iterable<? extends Locale.Category>) iterable0);
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      
      // Undeclared exception!
      try { 
        IterableUtils.boundedIterable((Iterable<SynchronizedBag<CollectionBag>>) serviceLoader0, (-125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      Object object0 = IterableUtils.forEachButLast((Iterable<Object>) linkedList0, (Closure<? super Object>) closureUtilsTest_MockClosure0);
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<Object>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.unmodifiableIterable((Iterable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vector<PredicatedBag<Locale.LanguageRange>> vector0 = new Vector<PredicatedBag<Locale.LanguageRange>>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<PredicatedBag<Locale.LanguageRange>>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IterableUtils iterableUtils0 = new IterableUtils();
      assertNotNull(iterableUtils0);
      
      // Undeclared exception!
      try { 
        SynchronizedSortedBag.synchronizedSortedBag((SortedBag<CollectionSortedBag<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      Iterable<Locale.Category> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>) fluentIterable0, (Iterable<? extends Locale.Category>) fluentIterable0, (Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(iterable0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      assertNotNull(equalPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicateArray0[0]);
      assertNotNull(nullIsFalsePredicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertNotNull(onePredicate0);
      assertEquals(5, predicateArray0.length);
      
      Predicate<Integer> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Integer>) nullIsFalsePredicate0);
      assertNotNull(predicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      assertNotNull(transformerPredicate0);
      
      predicateArray0[3] = (Predicate<Object>) transformerPredicate0;
      LinkedList<CollectionBag<Locale.Category>> linkedList0 = new LinkedList<CollectionBag<Locale.Category>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultEquator<LinkedList<CollectionBag<Locale.Category>>> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<LinkedList<CollectionBag<Locale.Category>>> predicate1 = EqualPredicate.equalPredicate(linkedList0, (Equator<LinkedList<CollectionBag<Locale.Category>>>) defaultEquator0);
      assertNotNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, linkedList0.size());
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      assertNotNull(nullIsTruePredicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[4] = (Predicate<Object>) nullIsTruePredicate0;
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends Locale.Category>) iterable0, (Predicate<? super Locale.Category>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Iterable<CollectionBag<String>> iterable0 = IterableUtils.emptyIterable();
      assertNotNull(iterable0);
      
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 4);
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      iterableArray0[0] = (Iterable<String>) arrayList0;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(2000);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      iterableArray0[1] = (Iterable<String>) linkedHashSet0;
      FluentIterable<String> fluentIterable0 = FluentIterable.of("MaxSize parameter must not be negative.");
      assertNotNull(fluentIterable0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MaxSize parameter must not be negative.";
      FluentIterable<String> fluentIterable1 = fluentIterable0.append(stringArray0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(1, stringArray0.length);
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.eval();
      assertNotNull(fluentIterable2);
      assertNotSame(fluentIterable0, fluentIterable2);
      assertNotSame(fluentIterable2, fluentIterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertEquals(1, stringArray0.length);
      
      iterableArray0[2] = (Iterable<String>) fluentIterable2;
      TreeBag<String> treeBag0 = new TreeBag<String>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertNotNull(treeBag0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      SortedBag<String> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<String>) treeBag0);
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag0.contains("MaxSize parameter must not be negative."));
      assertNotNull(sortedBag0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      SynchronizedSortedBag<String> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag(sortedBag0);
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(synchronizedSortedBag0.contains("MaxSize parameter must not be negative."));
      assertNotNull(synchronizedSortedBag0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      SortedBag<String> sortedBag1 = CollectionSortedBag.collectionSortedBag((SortedBag<String>) synchronizedSortedBag0);
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(synchronizedSortedBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag1.contains("MaxSize parameter must not be negative."));
      assertNotNull(sortedBag1);
      assertTrue(sortedBag1.equals((Object)sortedBag0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      assertEquals(0, sortedBag1.size());
      
      iterableArray0[3] = (Iterable<String>) sortedBag1;
      Iterable<String> iterable1 = IterableUtils.chainedIterable((Iterable<? extends String>[]) iterableArray0);
      assertNotNull(iterable1);
      assertEquals(4, iterableArray0.length);
      
      ClosureUtilsTest.MockTransformer<String> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<String>();
      assertNotNull(closureUtilsTest_MockTransformer0);
      
      TransformedSortedBag<String> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag(sortedBag0, (Transformer<? super String, ? extends String>) closureUtilsTest_MockTransformer0);
      assertFalse(transformedSortedBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag0.contains("MaxSize parameter must not be negative."));
      assertNotNull(transformedSortedBag0);
      assertTrue(sortedBag0.equals((Object)sortedBag1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      Factory<TransformedBag<String>> factory0 = ConstantFactory.constantFactory((TransformedBag<String>) transformedSortedBag0);
      assertFalse(transformedSortedBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertFalse(treeBag0.contains("MaxSize parameter must not be negative."));
      assertFalse(sortedBag0.contains("MaxSize parameter must not be negative."));
      assertNotNull(factory0);
      assertTrue(sortedBag0.equals((Object)sortedBag1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, sortedBag0.size());
      
      boolean boolean0 = treeBag0.add("MaxSize parameter must not be negative.");
      assertFalse(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertTrue(treeBag0.contains("MaxSize parameter must not be negative."));
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, treeBag0.size());
      assertFalse(treeBag0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      boolean boolean1 = linkedHashSet0.add("MaxSize parameter must not be negative.");
      assertTrue(linkedHashSet0.contains("MaxSize parameter must not be negative."));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends String>) iterable1, factory0, (Predicate<? super String>[]) predicateArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>(3, 3);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(anyPredicate0);
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, anyPredicate0);
      assertNotNull(transformedPredicate0);
      
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) transformedPredicate0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      HashBag<Predicate<Object>> hashBag0 = new HashBag<Predicate<Object>>();
      assertFalse(hashBag0.contains(predicate0));
      assertNotNull(hashBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      CollectionBag<Predicate<Object>> collectionBag0 = new CollectionBag<Predicate<Object>>(hashBag0);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(collectionBag0.contains(predicate0));
      assertNotNull(collectionBag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Bag<Predicate<Object>> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Predicate<Object>>) collectionBag0);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(collectionBag0.contains(predicate0));
      assertFalse(bag0.contains(predicate0));
      assertNotNull(bag0);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      assertEquals(0, bag0.size());
      
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) bag0);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(collectionBag0.contains(predicate0));
      assertFalse(bag0.contains(predicate0));
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      assertEquals(0, bag0.size());
      
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) collectionBag0);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(collectionBag0.contains(predicate0));
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      predicateArray0[2] = predicate2;
      HashSet<Predicate<Object>> hashSet1 = new HashSet<Predicate<Object>>(hashBag0);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(hashSet1.contains(predicate0));
      assertNotNull(hashSet1);
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet1);
      assertFalse(hashBag0.contains(predicate0));
      assertFalse(hashSet1.contains(predicate0));
      assertNotNull(predicate3);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      predicateArray0[3] = predicate3;
      List<List<String>> list0 = IterableUtils.partition((Iterable<? extends String>) hashSet0, (Predicate<? super String>[]) predicateArray0);
      assertNotNull(list0);
      assertEquals(4, predicateArray0.length);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      assertNotNull(fluentIterable0);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.loop();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      // Undeclared exception!
      try { 
        IterableUtils.contains((Iterable<? extends Integer>) fluentIterable1, integer0, (Equator<? super Integer>) defaultEquator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Iterable<Locale.LanguageRange> iterable0 = null;
      long long0 = 172L;
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<Locale.LanguageRange>) null, 172L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      assertNotNull(predicate0);
      
      Iterable<Integer> iterable0 = IterableUtils.filteredIterable((Iterable<Integer>) linkedHashSet0, (Predicate<? super Integer>) predicate0);
      assertNotNull(iterable0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterable<Integer> iterable1 = IterableUtils.zippingIterable((Iterable<? extends Integer>) iterable0, (Iterable<? extends Integer>) linkedHashSet0);
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      IterableUtils.checkNotNull(iterable1);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      long long0 = IterableUtils.countMatches(iterable1, (Predicate<? super Integer>) uniquePredicate0);
      assertEquals(0L, long0);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterable<Integer> iterable2 = IterableUtils.filteredIterable(iterable0, (Predicate<? super Integer>) predicate0);
      assertNotNull(iterable2);
      assertNotSame(iterable0, iterable2);
      assertNotSame(iterable2, iterable0);
      assertFalse(iterable0.equals((Object)iterable1));
      assertFalse(iterable2.equals((Object)iterable0));
      assertFalse(iterable2.equals((Object)iterable1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      boolean boolean0 = IterableUtils.contains((Iterable<? extends String>) treeBag0, "", (Equator<? super String>) defaultEquator0);
      assertFalse(treeBag0.contains(""));
      assertFalse(boolean0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.unmodifiable();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<String> fluentIterable2 = fluentIterable1.eval();
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      FluentIterable<Integer> fluentIterable3 = FluentIterable.of((Iterable<Integer>) arrayList0);
      assertNotNull(fluentIterable3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      FluentIterable<String> fluentIterable4 = fluentIterable2.append((Iterable<? extends String>) fluentIterable1);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      
      List<String> list0 = fluentIterable2.toList();
      assertNotNull(list0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = fluentIterable2.toList();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Iterator<String> iterator0 = fluentIterable1.iterator();
      assertNotNull(iterator0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      boolean boolean0 = fluentIterable2.isEmpty();
      assertTrue(boolean0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      
      boolean boolean1 = IterableUtils.isEmpty(fluentIterable2);
      assertTrue(boolean1);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        IterableUtils.forEachButLast((Iterable<String>) fluentIterable1, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null.
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>((-235));
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterable<InstanceofPredicate> iterable0 = IterableUtils.collatedIterable((Iterable<? extends InstanceofPredicate>) arrayDeque0, (Iterable<? extends InstanceofPredicate>) arrayDeque0);
      assertNotNull(iterable0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Transformer<InstanceofPredicate, String> transformer0 = (Transformer<InstanceofPredicate, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString(iterable0, (Transformer<? super InstanceofPredicate, String>) transformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FluentIterable<SynchronizedBag<Locale.Category>> fluentIterable0 = new FluentIterable<SynchronizedBag<Locale.Category>>();
      assertNotNull(fluentIterable0);
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<SynchronizedBag<Locale.Category>>) fluentIterable0, (Predicate<? super SynchronizedBag<Locale.Category>>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("?IG");
      assertTrue(arrayList0.contains("?IG"));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = IterableUtils.contains((Iterable<Object>) linkedHashSet0, (Object) arrayList0);
      assertFalse(linkedHashSet0.contains("?IG"));
      assertTrue(arrayList0.contains("?IG"));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      PredicatedCollection<Locale.Category> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Locale.Category>) hashSet0, (Predicate<? super Locale.Category>) predicate0);
      assertNotNull(predicatedCollection0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ClosureUtilsTest.MockClosure<Locale.Category> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Locale.Category>();
      assertNotNull(closureUtilsTest_MockClosure0);
      
      IterableUtils.forEachButLast((Iterable<Locale.Category>) predicatedCollection0, (Closure<? super Locale.Category>) closureUtilsTest_MockClosure0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.loopingIterable((Iterable<TransformedBag<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 4);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2734);
      assertNotNull(integer0);
      assertEquals(2734, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1490));
      assertNotNull(integer1);
      assertEquals((-1490), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(2734, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(8, integerArray0.length);
      
      integerArray0[2] = integer2;
      int int0 = 0;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(400);
      assertNotNull(integer5);
      assertEquals(400, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(679);
      assertNotNull(integer7);
      assertEquals(679, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      
      integerArray0[7] = integer7;
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      assertNotNull(fluentIterable0);
      assertEquals(8, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.unmodifiable();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertEquals(8, integerArray0.length);
      
      iterableArray0[0] = (Iterable<Integer>) fluentIterable1;
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertFalse(arrayDeque0.contains(integer2));
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      iterableArray0[1] = (Iterable<Integer>) arrayDeque0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((int) integerArray0[5], comparator0);
      assertFalse(priorityQueue0.contains(integer2));
      assertNotNull(priorityQueue0);
      assertEquals(8, integerArray0.length);
      assertEquals(0, priorityQueue0.size());
      
      iterableArray0[2] = (Iterable<Integer>) priorityQueue0;
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends Integer>) iterableArray0[0], (Iterable<? extends Integer>) null, (Iterable<? extends Integer>) fluentIterable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ArrayDeque<Collection<String>> arrayDeque0 = new ArrayDeque<Collection<String>>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayList<Collection<String>> arrayList0 = new ArrayList<Collection<String>>(arrayDeque0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashBag<Collection<String>> hashBag0 = new HashBag<Collection<String>>(arrayList0);
      assertNotNull(hashBag0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Iterable<Collection<String>> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Collection<String>>) hashBag0, (Iterable<? extends Collection<String>>) arrayList0, (Iterable<? extends Collection<String>>) arrayDeque0);
      assertNotNull(iterable0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      Iterable<Collection<String>> iterable1 = IterableUtils.reversedIterable(iterable0);
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashBag0.isEmpty());
      assertEquals(0, hashBag0.size());
      
      TreeBag<Locale.Category> treeBag0 = new TreeBag<Locale.Category>((Comparator<? super Locale.Category>) null);
      assertNotNull(treeBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      CollectionSortedBag<Locale.Category> collectionSortedBag0 = new CollectionSortedBag<Locale.Category>(treeBag0);
      assertNotNull(collectionSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      PredicatedSortedBag<Locale.Category> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Locale.Category>) collectionSortedBag0, (Predicate<? super Locale.Category>) uniquePredicate0);
      assertNotNull(predicatedSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      Transformer<Object, Locale.Category> transformer0 = (Transformer<Object, Locale.Category>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedSortedBag<Locale.Category> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Locale.Category>) predicatedSortedBag0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      assertNotNull(transformedSortedBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
      
      IterableUtils.find((Iterable<Locale.Category>) transformedSortedBag0, (Predicate<? super Locale.Category>) uniquePredicate0);
      assertEquals(0, treeBag0.size());
      assertTrue(treeBag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      assertNotNull(treeBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      
      PredicatedSortedBag<String> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<String>) treeBag0, (Predicate<? super String>) nullIsExceptionPredicate0);
      assertNotNull(predicatedSortedBag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      
      Bag<String> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends String>) predicatedSortedBag0);
      assertNotNull(bag0);
      assertTrue(treeBag0.isEmpty());
      assertEquals(0, treeBag0.size());
      assertEquals(0, bag0.size());
      
      // Undeclared exception!
      try { 
        IterableUtils.first((Iterable<String>) bag0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_Category0);
      assertNotNull(fluentIterable0);
      
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.reverse();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable2 = fluentIterable1.limit(1709L);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Locale.Category> fluentIterable3 = fluentIterable2.unique();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      FluentIterable<Locale.Category> fluentIterable4 = fluentIterable3.append((Iterable<? extends Locale.Category>) fluentIterable0);
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      
      FluentIterable<Locale.Category> fluentIterable5 = fluentIterable4.unmodifiable();
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      
      iterableArray0[0] = (Iterable<Locale.Category>) fluentIterable5;
      Iterable<Locale.Category> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>) fluentIterable2, (Iterable<? extends Locale.Category>) fluentIterable1);
      assertNotNull(iterable0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      
      iterableArray0[1] = iterable0;
      Iterable<Locale.Category> iterable1 = IterableUtils.reversedIterable(iterable0);
      assertNotNull(iterable1);
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(iterable1.equals((Object)iterable0));
      
      iterableArray0[2] = iterable1;
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(0, 0);
      assertFalse(vector0.contains(locale_Category0));
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      iterableArray0[3] = (Iterable<Locale.Category>) vector0;
      IterableUtils.checkNotNull(iterableArray0);
      assertEquals(4, iterableArray0.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Iterable<Locale.Category>[] iterableArray0 = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 9);
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>((SortedSet<Locale.Category>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      iterableArray0[0] = (Iterable<Locale.Category>) treeSet1;
      List<Locale.Category> list0 = IterableUtils.toList((Iterable<Locale.Category>) treeSet1);
      assertNotNull(list0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      iterableArray0[1] = (Iterable<Locale.Category>) list0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertNotNull(enumSet0);
      assertEquals(7, locale_CategoryArray0.length);
      assertEquals(1, enumSet0.size());
      
      iterableArray0[2] = (Iterable<Locale.Category>) enumSet0;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      assertTrue(enumSet1.contains(locale_Category0));
      assertNotNull(enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(2, enumSet1.size());
      
      iterableArray0[3] = (Iterable<Locale.Category>) enumSet1;
      Class<Locale.Category> class1 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet2 = EnumSet.noneOf(class1);
      assertFalse(enumSet2.contains(locale_Category0));
      assertNotNull(enumSet2);
      assertSame(class1, class0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertEquals(0, enumSet2.size());
      
      iterableArray0[4] = (Iterable<Locale.Category>) enumSet2;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertFalse(linkedList0.contains(locale_Category0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      iterableArray0[5] = (Iterable<Locale.Category>) linkedList0;
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertFalse(linkedHashSet0.contains(locale_Category0));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      iterableArray0[6] = (Iterable<Locale.Category>) linkedHashSet0;
      Locale.Category[] locale_CategoryArray1 = new Locale.Category[9];
      assertFalse(locale_CategoryArray1.equals((Object)locale_CategoryArray0));
      
      locale_CategoryArray1[0] = locale_Category0;
      locale_CategoryArray1[1] = locale_Category0;
      locale_CategoryArray1[2] = locale_Category0;
      locale_CategoryArray1[3] = locale_Category0;
      locale_CategoryArray1[4] = locale_Category0;
      locale_CategoryArray1[5] = locale_Category0;
      locale_CategoryArray1[6] = locale_Category0;
      locale_CategoryArray1[7] = locale_Category0;
      locale_CategoryArray1[8] = locale_Category0;
      FluentIterable<Locale.Category> fluentIterable0 = FluentIterable.of(locale_CategoryArray1);
      assertNotNull(fluentIterable0);
      assertNotSame(locale_CategoryArray1, locale_CategoryArray0);
      assertFalse(locale_CategoryArray1.equals((Object)locale_CategoryArray0));
      assertEquals(9, locale_CategoryArray1.length);
      
      iterableArray0[7] = (Iterable<Locale.Category>) fluentIterable0;
      FluentIterable<Locale.Category> fluentIterable1 = fluentIterable0.eval();
      assertNotNull(fluentIterable1);
      assertNotSame(fluentIterable0, fluentIterable1);
      assertNotSame(fluentIterable1, fluentIterable0);
      assertNotSame(locale_CategoryArray1, locale_CategoryArray0);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(locale_CategoryArray1.equals((Object)locale_CategoryArray0));
      assertEquals(9, locale_CategoryArray1.length);
      
      iterableArray0[8] = (Iterable<Locale.Category>) fluentIterable1;
      Iterable<Locale.Category> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Locale.Category>[]) iterableArray0);
      assertNotNull(iterable0);
      assertEquals(9, iterableArray0.length);
      
      Iterable<Locale.Category> iterable1 = IterableUtils.uniqueIterable(iterable0);
      assertNotNull(iterable1);
      assertFalse(iterable1.equals((Object)iterable0));
      assertEquals(9, iterableArray0.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      Integer integer0 = new Integer((-131));
      assertNotNull(integer0);
      assertEquals((-131), (int)integer0);
      
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IterableUtils.filteredIterable((Iterable<Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 0);
      Iterable<Integer> iterable0 = IterableUtils.chainedIterable((Iterable<? extends Integer>[]) iterableArray0);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(iterable0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.zip(iterableArray0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.unique();
      ClosureUtilsTest.MockTransformer<Integer> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Integer>();
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.transform((Transformer<? super Integer, ? extends Integer>) closureUtilsTest_MockTransformer0);
      int int0 = IterableUtils.frequency((Iterable<Integer>) fluentIterable3, (Integer) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FluentIterable<Locale.LanguageRange> fluentIterable0 = FluentIterable.empty();
      List<Locale.LanguageRange> list0 = fluentIterable0.toList();
      ArrayDeque<Locale.LanguageRange> arrayDeque0 = new ArrayDeque<Locale.LanguageRange>(list0);
      Iterable<Locale.LanguageRange> iterable0 = IterableUtils.uniqueIterable((Iterable<Locale.LanguageRange>) arrayDeque0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      Integer integer0 = new Integer(2);
      treeSet0.add(integer0);
      int int0 = IterableUtils.size(treeSet0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<Integer>) null, 512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 512
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Iterable<Object>[] iterableArray0 = (Iterable<Object>[]) Array.newInstance(Iterable.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      iterableArray0[0] = (Iterable<Object>) priorityQueue0;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      TreeSet<Object> treeSet1 = new TreeSet<Object>((SortedSet<Object>) treeSet0);
      TreeSet<Object> treeSet2 = new TreeSet<Object>((SortedSet<Object>) treeSet1);
      iterableArray0[1] = (Iterable<Object>) treeSet2;
      TreeBag<Object> treeBag0 = new TreeBag<Object>(treeSet2);
      iterableArray0[2] = (Iterable<Object>) treeBag0;
      long long0 = (-956L);
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<Object>) treeSet0, (-956L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Iterable<Locale.LanguageRange> iterable0 = IterableUtils.unmodifiableIterable((Iterable<Locale.LanguageRange>) stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IterableUtils.indexOf(iterable0, (Predicate<? super Locale.LanguageRange>) predicate0);
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      PriorityQueue<Locale.Category> priorityQueue1 = new PriorityQueue<Locale.Category>(priorityQueue0);
      priorityQueue1.isEmpty();
      HashBag<Locale.Category> hashBag0 = new HashBag<Locale.Category>(priorityQueue1);
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<Locale.Category>) hashBag0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Bag<Integer> bag0 = CollectionBag.collectionBag((Bag<Integer>) hashBag0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(bag0);
      Bag<Integer> bag1 = CollectionBag.collectionBag((Bag<Integer>) treeBag0);
      HashSet<Object> hashSet0 = new HashSet<Object>(bag1);
      Integer integer0 = new Integer(0);
      treeBag0.add(integer0);
      hashSet0.add(bag0);
      IterableUtils.boundedIterable((Iterable<Object>) hashSet0, 0L);
      SynchronizedCollection<Integer> synchronizedCollection0 = SynchronizedCollection.synchronizedCollection((Collection<Integer>) bag0);
      IterableUtils.size(synchronizedCollection0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Predicate<Object>>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FluentIterable<Locale.LanguageRange> fluentIterable0 = new FluentIterable<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        fluentIterable0.eval();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PredicatedBag<Integer>[] predicatedBagArray0 = (PredicatedBag<Integer>[]) Array.newInstance(PredicatedBag.class, 5);
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      PredicatedBag<Integer> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Integer>) hashBag0, (Predicate<? super Integer>) transformerPredicate0);
      predicatedBagArray0[0] = predicatedBag0;
      PredicatedBag<Integer> predicatedBag1 = PredicatedBag.predicatedBag((Bag<Integer>) predicatedBag0, (Predicate<? super Integer>) transformerPredicate0);
      predicatedBagArray0[1] = predicatedBag1;
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      PredicatedSortedBag<Integer> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Integer>) treeBag0, (Predicate<? super Integer>) transformerPredicate0);
      predicatedBagArray0[2] = (PredicatedBag<Integer>) predicatedSortedBag0;
      PredicatedSortedBag<Integer> predicatedSortedBag1 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Integer>) treeBag0, (Predicate<? super Integer>) transformerPredicate0);
      predicatedBagArray0[3] = (PredicatedBag<Integer>) predicatedSortedBag1;
      PredicatedBag<Integer> predicatedBag2 = PredicatedBag.predicatedBag((Bag<Integer>) hashBag0, (Predicate<? super Integer>) transformerPredicate0);
      predicatedBagArray0[4] = predicatedBag2;
      FluentIterable<PredicatedBag<Integer>> fluentIterable0 = FluentIterable.of(predicatedBagArray0);
      FluentIterable<PredicatedBag<Integer>> fluentIterable1 = fluentIterable0.loop();
      FluentIterable<PredicatedBag<Integer>> fluentIterable2 = fluentIterable1.collate((Iterable<? extends PredicatedBag<Integer>>) fluentIterable0);
      FluentIterable<PredicatedBag<Integer>> fluentIterable3 = fluentIterable2.zip((Iterable<? extends PredicatedBag<Integer>>) fluentIterable1);
      FluentIterable<PredicatedBag<Integer>> fluentIterable4 = fluentIterable3.limit(1838L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<PredicatedBag<Integer>> treeBag1 = new TreeBag<PredicatedBag<Integer>>(comparator0);
      SynchronizedSortedBag<PredicatedBag<Integer>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<PredicatedBag<Integer>>) treeBag1);
      Factory<SynchronizedBag<PredicatedBag<Integer>>> factory0 = ConstantFactory.constantFactory((SynchronizedBag<PredicatedBag<Integer>>) synchronizedSortedBag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      // Undeclared exception!
      try { 
        IterableUtils.partition((Iterable<? extends PredicatedBag<Integer>>) fluentIterable4, factory0, (Predicate<? super PredicatedBag<Integer>>[]) predicateArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.PredicatedBag cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "WZ";
      stringArray0[2] = "";
      stringArray0[3] = "R})z4vFCK5kUCxznr";
      stringArray0[4] = "kLwR>u8eTP]5/~C_";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(transformer0).transform(any());
      FluentIterable<String> fluentIterable1 = fluentIterable0.transform((Transformer<? super String, ? extends String>) transformer0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.zip((Iterable<? extends String>) fluentIterable0);
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer1).transform(any());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      fluentIterable1.unmodifiable();
      // Undeclared exception!
      try { 
        IterableUtils.find((Iterable<String>) fluentIterable2, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeBag0);
      Iterable<Object> iterable0 = IterableUtils.boundedIterable((Iterable<Object>) arrayList0, 3792L);
      IterableUtils.skippingIterable(iterable0, 3792L);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0, (Equator<Object>) defaultEquator0);
      IterableUtils.find((Iterable<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate0);
      TreeBag<TransformedBag<String>> treeBag1 = new TreeBag<TransformedBag<String>>();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString((Iterable<TransformedBag<String>>) treeBag1, (Transformer<? super TransformedBag<String>, String>) transformer0, "MaxSize parameter must not be negative.", "org.apache.commons.collections4.functors.NullIsExceptionPredicate", "' rejected it");
      assertEquals("org.apache.commons.collections4.functors.NullIsExceptionPredicate' rejected it", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int int0 = (-2048);
      PriorityQueue<Integer> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Integer>((-2048));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }
}
